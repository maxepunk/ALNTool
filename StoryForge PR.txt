**Revised & Consolidated Project Request Document: StoryForge - Immersive Narrative Design Hub**

**Document Version:** 3.0
**Date:** May 19, 2025 
**Document Purpose:** This document provides the comprehensive and unified specification for the StoryForge tool. It reflects the outcomes of an architectural and codebase review (May 2025), incorporates a definitive understanding of the existing "About Last Night" Notion workspace structure, and details the current and planned data flow for the Relationship Mapper. It is intended to serve as the gold-standard reference for continued development.

**1. Project Background: The "About Last Night" Experience**
*   **Game:** "About Last Night... an Immersive Crime Thriller" (Internal Codename: "Recovery State")
*   **Overview:** A 90-minute, in-person immersive experience for 5-35 players in a near-future Silicon Valley setting. It combines escape room puzzles, role-play, social deduction, and strategic trading.
*   **Premise:** Players awaken in a warehouse post-party, memories fragmented, with CEO Marcus Blackwood dead.
    *   **Act 1: Murder Mystery:** Players investigate Marcus's death, recover "elements" (including physical/digital items representing memories), and build theories.
    *   **Act 2: Memory Trading & Deeper Conspiracy:** Discovery of a "memory reader" (RFID-based) reveals certain elements (specifically those designated as "memories") as tradable commodities. Marcus's death is revealed as self-inflicted due to memory-altering drug experiments. A countdown begins as memories risk irreversible corruption.
*   **Player Choices/Endings:** Cooperate with "The Detective," sell memories to the "Black Market," or work to recover personal memories.
*   **Central Mechanics:** Element Recovery (including Memory recovery), Puzzle Solving, Role-Playing & Social Deduction, Strategic Trading (Act 2).

**2. Project Overview & Goals (StoryForge Tool)**
*   **Project Name:** StoryForge
*   **Tool Goal:** To develop a custom web-based front-end design tool that uses the existing "About Last Night" Notion workspace (as defined in Section 4) as its backend. StoryForge will provide a visually intuitive, interconnected, and role-optimized environment for designing, managing, and iterating on the immersive narrative experience.
*   **Primary Objectives:**
    *   **Visualize Connections:** Enable easy understanding of relationships between Characters, Timeline Events, Puzzles, and Elements (including specialized Memory-type Elements).
    *   **Streamline Workflows:** Offer dedicated views and tools tailored for different team roles (Narrative Designer, Writer, Puzzle Designer, Asset Manager).
    *   **Centralize & Enhance Data Access:** Provide a more structured and interactive way to access and modify data stored in Notion databases.
    *   **Facilitate Iteration & Scaling:** Support ongoing design changes, ensure narrative consistency, and manage the complexity of a growing narrative.
    *   **Support Design Process:** Address interdependencies, timeline management, act structure, physical prop management, and playtesting.

**3. Core Technology Stack**
*   **Backend Data Store:** **Existing Notion Workspace** (via Notion API). *This is a critical constraint. The structure defined in Section 4 is the target.*
*   **Frontend Framework:** React (as implemented).
*   **Visualization Libraries:** `@xyflow/react` (React Flow) is the primary visualization library used.
*   **State Management:** React Query (as implemented for API service layer) and Zustand (for client-side UI state, e.g., within the Relationship Mapper).
*   **Styling:** Material UI with a dark theme (as implemented).
*   **Backend-for-Frontend (BFF) / Middleware:** Node.js with Express.js (as implemented). This BFF handles Notion API interactions, caching (using `node-cache`), complex data transformations (including generation of rich `graphData` for visualization as per Section 4.E), and secure API key management.

**4. Notion Backend Structure (Definitive Gold Standard)**

StoryForge **must** read from and write to the Notion workspace structured with the following 4 primary databases. Property names and types provided below are based on the May 2025 codebase review and successful Phase 1 integration.

**Important Note on "Memory-Specific" Fields within the Elements Database:**
The `Elements` database serves as a general store for all items, including those that function narratively as "Memories." For a minimal set of memory-specific attributes not covered by existing dedicated Notion properties (e.g., `RFID Token ID`), a strategy of embedding structured data within the `Description/Text` field will be used.
*   **Strategy for Handling (Minimal Implementation - Read-Only Focus Initially):**
    1.  **Data Entry Template:**  (Placeholder: A specific, clearly delimited format, e.g., key-value pairs like `SF_RFID: 12345`, will be defined for entering these attributes within the `Description/Text` field of memory-type Elements.)
    2.  **BFF Responsibility (Read):** For Elements identified as memories (e.g., via `Basic Type` like "Memory Token Video", "Corrupted Memory RFID"), the BFF (`notionPropertyMapper.js`) will parse the `Description/Text` content to extract this minimal set of defined attributes (e.g., RFID).
    3.  **Frontend Display:** The frontend (`ElementDetail.jsx`) will display these parsed attributes if present.
    4.  **Future - Editing (Write Responsibility):** (Out of scope for initial minimal implementation) When/if editing these embedded attributes is implemented in StoryForge, the tool will need to update the structured information within the `Description/Text` field carefully, preserving other content. This is a complex task for future consideration.
    5.  **Future - Adding New Notion Properties (Last Resort):** If the minimal set of embedded attributes proves insufficient or if parsing becomes unmanageable for critical, frequently filtered fields, adding new explicit properties to the Notion `Elements` database will be considered.

**(A) Characters Database**
*   **Notion DatabaseID:** `18c2f33d583f8060a6abde32ff06bca2`
*   **Properties:** (Verified against codebase and sample data - align with original PRD)
    *   `Name` (Title - Primary Key)
    *   `Type` (Select: "Player", "NPC")
    *   `Tier` (Select: "Core", "Secondary", "Tertiary")
    *   `Character Logline` (Text)
    *   `Overview & Key Relationships` (Rich Text)
    *   `Emotion towards CEO & others` (Text)
    *   `Primary Action` (Text - Primary goal at the party)
    *   `Events` (Relation to `Timeline` DB - `Timeline.Description`)
    *   `Character Puzzles` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Owned Elements` (Relation to `Elements` DB - `Elements.Name`)
    *   `Associated Elements` (Relation to `Elements` DB - `Elements.Name`)
    *   `Connections` (Number)
    *   *(Content from individual Character MD files like `Alex Character Sheet...md` is represented by an `Owned Element` of `Basic Type`: "Character Sheet". The `Description/Text` of that Element contains the sheet content.)*

**(B) Timeline Database (Events)**
*   **Notion DatabaseID:** `1b52f33d583f80deae5ad20020c120dd`
*   **Properties:** (Verified - align with original PRD)
    *   `Description` (Title - Primary Key, e.g., Event title)
    *   `Date` (Date)
    *   `Characters Involved` (Relation to `Characters` DB - `Characters.Name`)
    *   `Memory/Evidence` (Relation to `Elements` DB - `Elements.Name`)
    *   `mem type` (Text/Select - e.g., "Prop", "Set Dressing", "Memory Token Video")
    *   `Notes` (Rich Text)

**(C) Puzzles Database**
*   **Notion DatabaseID:** `1b62f33d583f80cc87cfd7d6c4b0b265`
*   **Properties:** (Verified - align with original PRD)
    *   `Puzzle` (Title - Primary Key, e.g., Puzzle name)
    *   `Owner` (Relation to `Characters` DB - `Characters.Name`)
    *   `Locked Item` (Relation to `Elements` DB - `Elements.Name`)
    *   `Puzzle Elements` (Relation to `Elements` DB - `Elements.Name`, i.e., elements required for the puzzle)
    *   `Rewards` (Relation to `Elements` DB - `Elements.Name`, i.e., elements rewarded by the puzzle)
    *   `Story Reveals` (Text or Relation to `Timeline` DB - `Timeline.Description`)
    *   `Timing` (Select, e.g., "Act 1", "Act 2")
    *   `Parent item` (Relation to self - `Puzzles.Puzzle`, for sub-puzzles)
    *   `Sub-Puzzles` (Relation to self, multiple - `Puzzles.Puzzle`, for parent puzzles listing sub-puzzles)
    *   `Asset Link` (URL, e.g., Canva links)
    *   `Description/Solution` (Rich Text)
    *   `Narrative Threads` (Multi-select Text or individual Text properties if preferred for Notion filtering)

**(D) Elements Database**
*   **Notion DatabaseID:** `18c2f33d583f802091bcd84c7dd94306`
*   **Properties:** (Verified - align with original PRD, notes on potential additions from sample CSV)
    *   `Name` (Title - Primary Key)
    *   `Owner` (Relation to `Characters` DB - `Characters.Name`)
    *   `Basic Type` (Select - e.g., "Prop", "Set Dressing", "Memory Token Video", "Memory Token Audio", "Memory Token Physical", "Corrupted Memory RFID", "Character Sheet", "Document", "Digital File", "Clue", "Container")
    *   `Description/Text` (Rich Text - Sourced from MD bodies.  **For memory-type Elements, this field will also contain structured data for memory-specific attributes like `Memory ID`, `Memory Title`, `Memory Type (Narrative)`, `Content (for text memories)`, `Corruption Status`, `RFID Token ID`, `Value Indicator`, `Puzzle Integration Type`, `Puzzle Notes` to be parsed/managed by StoryForge.**)
    *   `Container` (Relation to self - `Elements.Name`, i.e., this element is *inside* another element)
    *   `Contents` (Relation to self, multiple - `Elements.Name`, i.e., this element *is* a container and lists items inside)
    *   `Container Puzzle` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Required For (Puzzle)` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Rewarded by (Puzzle)` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Timeline Event` (Relation to `Timeline` DB - `Timeline.Description`)
    *   `Associated Characters` (Relation to `Characters` DB - `Characters.Name`)
    *   `Narrative Threads` (Multi-select Text or individual Text properties)
    *   `First Available` (Select, e.g., "Act 0", "Act 1", "Act 2")
    *   `Status` (Select - e.g., "Ready for Playtest", "Done", "In development", "Idea/Placeholder", "Source Prop/print", "To Design", "To Build", "Needs Repair")
    *   `Files & media` (Files & Media - For images, audio files, video files directly uploaded to Notion)
    *   `Content Link` (URL - For links to external files like Canva, Google Docs, or video/audio hosting if not using `Files & media`)
    *   `Production/Puzzle Notes` (Text)
    *   *(`Container?` (Boolean) - Consider for formal support based on sample CSV)*
    *   *(`Puzzle Chain` (URL/Relation) - Consider for formal support based on sample CSV)*

**(E) BFF `graphData` Object Specification (for Relationship Mapper)**
(Specification remains current and accurate based on code review of `notionController.js` helpers `_createGraphNodeInternal` and `_createGraphEdgeInternal`.)
'''json
{
  "center": { /* Fully mapped central entity object, matching structure of a node below */ },
  "nodes": [
    {
      "id": "string_entity_id",
      "name": "string_display_name", 
      "type": "string_entity_type", 
      "fullDescription": "string_long_form_description_for_tooltip",
      "descriptionSnippet": "string_short_snippet_for_tooltip",
      // Type-specific enriched properties (from `_createGraphNodeInternal` in BFF):
      // For Character:
      "tier": "string_tier_value",
      "role": "string_player_or_npc",
      "primaryActionSnippet": "string_snippet_of_primary_action",
      // For Puzzle:
      "timing": "string_act_timing",
      "statusSummary": "string_e_g_requires_x_rewards_y",
      "storyRevealSnippet": "string_snippet_of_story_reveals",
      "ownerName": "string_character_name_if_any",
      "ownerId": "string_character_id_if_any",
      // For Element:
      "basicType": "string_element_basic_type",
      "status": "string_production_status",
      "flowSummary": "string_e_g_owner_x_required_for_y_rewarded_by_z",
      // For Timeline:
      "dateString": "string_formatted_date",
      "participantSummary": "string_e_g_involves_x_chars_y_elements",
      "notesSnippet": "string_snippet_of_notes"
    }
  ],
  "edges": [
    {
      "source": "string_source_node_id",
      "target": "string_target_node_id",
      "label": "string_simple_relationship_label",
      "data": {
        "sourceNodeName": "string_source_node_display_name",
        "sourceNodeType": "string_source_node_type",
        "targetNodeName": "string_target_node_display_name",
        "targetNodeType": "string_target_node_type",
        "contextualLabel": "string_detailed_human_readable_label_for_tooltips",
        "shortLabel": "string_concise_label_for_on_path_display_and_grouping_logic"
      }
    }
  ]
}
'''

**5. Feature Breakdown & Development Phases**



**(OLD CONTENT OBSOLETE - TO BE REPLACED BY REFERENCE TO NEW ACTION PLAN IN SECTION 9)**

**6. Non-Functional Requirements**
*   **Usability:** Intuitive for team members with varying technical skills.
*   **Performance:** Responsive for common tasks, considering Notion API limits. Aggressive caching and optimized API calls in BFF are crucial.
*   **Maintainability:** Well-structured, documented code (ongoing effort).
*   **Security:** Notion API key strictly handled in the BFF, not exposed client-side.
*   **Data Integrity:** Operations must accurately reflect in Notion and maintain relational integrity as defined by the Notion schema in Section 4.  Changes to structured data within Rich Text fields must be handled carefully to preserve existing content.
*   **Accessibility:** Ensure all UI components, especially RelationshipMapper, meet accessibility standards (keyboard navigation, ARIA, color contrast).

**NEW SECTION: 6. User Personas, Workflows, and Relationship Mapper Use Cases**
(This section is valuable and should be kept as is.)
... (Original content of this section) ...

**7. Assumptions & Dependencies**
*   **The Notion workspace structured precisely according to Section 4 is maintained.** Unauthorized changes to this Notion structure will break the tool.
*   Notion API remains stable, accessible, and its features support the required operations.
*   The initial data import from source CSVs and Markdown files has correctly established the baseline content and structure in Notion.
*   **The BFF's `/graph` endpoints consistently provide valid `graphData` objects structured according to Section 4.E.** The frontend `RelationshipMapper` now uses this `graphData` as its sole source for graph construction. 

**8. Future Considerations (Out of Scope for current phases unless specified)**
(This list should be reviewed and maintained.)
... (Original content of this section, plus new considerations below) ...
*   Full, robust parsing (beyond minimal RFID) of structured data from Rich Text for memory attributes, if the minimal approach proves insufficient long-term.
*   Re-evaluation of true Dagre compound node capabilities if the "Dagre + Orbiting" strategy (Phase 1, Step 2 of new Action Plan) proves insufficient after refinement.

**9. Action Plan & Next Steps**

(Placeholder for the new detailed Action Plan)

**10. Testing Strategy**

**Testing Suite Status (as of May 19, 2025):**
-  Legacy and irrelevant tests have been identified for removal. Active tests for core backend and frontend functionalities are in place but require ongoing review and expansion per the new Action Plan.
- E2E tests are planned.

A comprehensive testing strategy is crucial...
... (The general principles in 10.1, 10.2, 10.3, and 10.4 remain valuable guidance. Specific claims of "completed" tests or file names in 10.2.A and 10.2.B need careful review and alignment with the post-cleanup codebase.) ...



This testing strategy will serve as a blueprint for building a resilient and reliable StoryForge application.

---
