**Revised & Consolidated Project Request Document: StoryForge - Immersive Narrative Design Hub**

**Document Version:** 3.3.0
**Date:** May 20, 2025
**Document Purpose:** This document provides the comprehensive and unified specification for the StoryForge tool. It reflects the outcomes of an architectural and codebase review (May 2025), incorporates a definitive understanding of the existing "About Last Night" Notion workspace structure, details the current and planned data flow for the Relationship Mapper, includes detailed User Personas and Use Cases, and contains the current detailed Action Plan for ongoing development. It is intended to serve as the gold-standard reference.

**1. Project Background: The "About Last Night" Experience**
*(No changes from PRD v3.2.1)*

**2. Project Overview & Goals (StoryForge Tool)**
*(No changes from PRD v3.2.1)*

**3. Core Technology Stack**
*(No changes from PRD v3.2.1)*

**4. Notion Backend Structure (Definitive Gold Standard)**
*(No changes from PRD v3.2.1, including Section 4.A-D on database structures and 4.E on BFF `graphData` Object Specification)*

**5. Feature Breakdown & Development Phases**
*(No changes from PRD v3.2.1 - refers to Section 9)*

**6. User Personas, Workflows, Relationship Mapper Use Cases & UX Principles**
*(No changes from PRD v3.2.1 for Sections 6.A, 6.B, 6.C)*

**D. UX Principles for Graph Clarity in Relationship Mapper (Revised for Focused Dagre/Compound Node Strategy):**
*(No changes from PRD v3.2.1 - these principles remain the target state)*

**7. Assumptions & Dependencies**
*(No changes from PRD v3.2.1)*

**8. Future Considerations (Out of Scope for current phases unless specified in Action Plan - Section 9)**
*(No changes from PRD v3.2.1)*

**9. Action Plan & Next Steps**

This section outlines the current, active plan for StoryForge refinement and advancement as of **May 20, 2025**.

**Overarching Goal for All Phases:** Ensure all project documentation is consistent and up-to-date, with this `StoryForge PR.txt` document serving as the definitive "gold standard" source of truth. Progress will be tracked at each step.

**Development Methodology Notes:**
*   **Branching:** All work for this action plan should occur on dedicated feature branches (e.g., `feature/mapper-rebuild-phase1-step2`), which are then merged into `master` via Pull Requests.
*   **Iterative Work & Canvas Usage (If applicable with AI Assistant):** For complex modifications, AI assistant's canvas features might be used for temporary versions before finalizing code. Push updates to feature branches at appropriate checkpoints.

**Phase 1: Codebase Hygiene, Documentation Synchronization & Critical Mapper UX Foundation**
*Focus: Cleaning up, ensuring documentation is accurate, and making immediate high-value improvements to the Relationship Mapper's core usability.*

**1. Initial PRD Synchronization & Technical Debt Cleanup Kick-off (Concurrent Processes):**
    *   **1A. PRD Gold Standard - Initial Pass & Version Bump:**
        *   Status: **COMPLETED** (Updated to v3.2.1 on May 19, 2025. This current update brings it to v3.3.0).
    *   **1B. Technical Debt Cleanup & Code Refinements (High Priority - Ongoing):**
        *   Status: **COMPLETED** (as per details in PRD v3.2.1).

**2. RelationshipMapper - Focused Rebuild for Core UX & Layout Foundation (High Priority):**

    *   **A. Rationale for Rebuild & Goals:**
        *   (No changes from PRD v3.2.1)

    *   **B. Revised Architectural Approach for Relationship Mapper:**
        *   (Largely as defined in PRD v3.2.1, with clarifications on current state and debugging findings)
        *   **Input Data Structure:** The mapper consumes the `graphData` object from the BFF. **It has been observed that initial renders of `RelationshipMapperContent` may occur with `props.graphData` being `undefined` before data is fully fetched and propagated; the UI and subsequent hooks (`useGraphTransform`, `getDagreLayout`) must handle this initial state gracefully (e.g., by processing 0 nodes/edges without error).**
        *   **Primary Layout Strategy (Exclusive):** Dagre (`dagre.js`) is the exclusive layout engine.
        *   **Layout Orientation:** Default Dagre orientation is 'TB' (Top-to-Bottom).
        *   **Visual Grouping Mechanism (Compound Nodes):** This is the primary goal for visual clarity.
            *   *Logical Group Identification:* `useGraphTransform.js` assigns `node.data.parentId` based on "Contains" (for Elements) and "Required For"/"Rewards" (for Puzzles) relationships from `edge.data.shortLabel`.
            *   *Dagre Compound Nodes (`layoutUtils.js`):*
                *   **Current Debugging State & Understanding (as of May 20, 2025):**
                    *   Basic Dagre layout (`dagre.layout(g)`) is **confirmed to execute successfully** when `graphData` is present, provided Dagre's `compound` option is set to `false` and `g.setParent()` calls are disabled. This produces a non-compound, but correctly laid-out graph (nodes are spread out, not stacked).
                    *   The previously observed `TypeError: Cannot set properties of undefined (setting 'rank')` within `dagre.layout(g)` appears to be intermittent and is **likely specifically related to Dagre's processing of compound graph features** (`compound: true` and associated `g.setParent()` calls), potentially exacerbated during hot-reloading or if the graph object `g` was in an inconsistent state. It is not a persistent error with the fundamental graph data itself when compound features are disabled.
                    *   The immediate priority is to re-enable `compound: true` and `g.setParent()` calls and specifically debug Dagre's behavior under these conditions to achieve a stable compound layout.
                *   *Target Implementation (as per PRD v3.2.1):* Utilize Dagre's `compound: true`, `g.setParent()`, and appropriate graph/node padding for spacing.
            *   **React Flow Parent Rendering (`useGraphTransform.js`):** `node.data.parentId` is mapped to `node.parentNode` to enable React Flow's hierarchical rendering.
        *   **Node Presentation (`EntityNode.jsx`):**
            *   Parent/Group Nodes: Distinct styling via `data.isActualParentGroup` flag (set in `useGraphTransform.js`) is implemented.
            *   Dynamic Label Display: Implemented using `useViewport()` for zoom-based label detail.
        *   **Edge Presentation (`CustomEdge.jsx`):** (No changes to current implementation planned in this step, optional refinements deferred).
        *   **Simplification of State and UI:**
            *   `useLayoutManager.js` has been simplified for a fixed Dagre layout.
            *   `RelationshipMapper.jsx` has removed UI for alternative layouts and Dagre orientation.
            *   `ClusterHull.jsx` (manual orbiting/hull logic) has been removed from `RelationshipMapper.jsx`.

    *   **C. Detailed Implementation Tasks & Status (as of May 20, 2025):**
        *   **1. PRD Alignment (This Document):** (Status: **COMPLETED** - This document, v3.3.0, reflects current understanding).
        *   **2. Data Transformation Refinement (`useGraphTransform.js`):**
            *   Status: **COMPLETED**. `parentId` assignment logic verified. `node.parentNode` mapping enabled. `isActualParentGroup` flag added. Logging enhanced for debugging. Handles initial empty/undefined graph data gracefully by producing 0 nodes/edges.
        *   **3. Layout Engine Overhaul (`layoutUtils.js` - `getDagreLayout`):**
            *   Status: **IN PROGRESS - TARGETING STABLE COMPOUND LAYOUT**.
            *   Removed alternative layouts and old Dagre orbiting logic: **COMPLETED**.
            *   Using standard node dimensions for Dagre: **COMPLETED**.
            *   Basic non-compound Dagre layout is functional when `graphData` is present and `compound: false` is used: **CONFIRMED**.
            *   Implementation of `g.setParent()` calls: **Implemented** (code exists, ready to be re-enabled).
            *   **Current Focus & Next Sub-Tasks:**
                *   Re-enable `compound: true` in the `dagre.graphlib.Graph` constructor and uncomment the `g.setParent()` calls within `getDagreLayout`.
                *   Systematically debug any `TypeError` (e.g., "Cannot set properties of undefined (setting 'rank')") or other errors that arise within `dagre.layout(g)` *specifically when processing compound graphs*. This involves:
                    *   Ensuring the Dagre graph object `g` is correctly initialized (or re-initialized if `getDagreLayout` is called multiple times, e.g., due to `useMemo` re-computation with changing dependencies).
                    *   Verifying that all nodes (including those intended as parents) and edges (including those defining parent-child relationships) are correctly added to the Dagre graph `g` *before* `dagre.layout(g)` is called.
                    *   Ensuring `parentId` references are valid within the set of nodes being laid out.
                    *   If the `TypeError` persists, iteratively simplify the graph data (nodes, edges, parent assignments) passed to `dagre.layout(g)` (with compound features enabled) to isolate the specific node, edge, or structural feature causing the ranking or layout error.
                *   Once Dagre layout with compound nodes is error-free: Apply and verify appropriate Dagre graph-level options (`nodesep`, `ranksep`, and potentially cluster-specific padding like `nodePadding`, `rankPadding`, `marginx`, `marginy`) for optimal visual spacing within and between groups.
        *   **4. Node Rendering Enhancements (`EntityNode.jsx`):**
            *   Status: **COMPLETED**. Dynamic labels and distinct parent styling implemented. Visuals dependent on successful compound layout.
        *   **5. Main Mapper Component Simplification (`RelationshipMapper.jsx`, `useLayoutManager.js`):**
            *   Status: **LARGELY COMPLETE**. UI for alternative layouts/orientation removed. `ClusterHull.jsx` removed. `useLayoutManager` simplified.
            *   **Outstanding/To Verify:**
                *   **Address Missing Fullscreen Controls:** Restore/ensure visibility and usability of the main map controls panel (depth, filters, zoom, fit-view, info, etc.) when the map is in fullscreen mode. Adjust styling/positioning for fullscreen as needed to ensure consistent accessibility (PRD Section 9, Phase 1, Step 2.C, Task 5 goal).
                *   Review `RelationshipMapperContent` and related components to ensure `graphData` is handled robustly throughout the rendering lifecycle, including its initial `undefined` state before data load, displaying appropriate loading indicators if necessary.
        *   **6. Edge Styling (Optional Refinement - `CustomEdge.jsx`):**
            *   Status: **DEFERRED**. To be evaluated after core layout and grouping are stable and visually assessed.
        *   **7. Filtering Logic Review (`filterGraph.js`):**
            *   Status: **COMPLETED (Initial Pass)**. SPOC logic temporarily disabled. Basic depth and type filtering remain. Further re-evaluation of SPOC to occur after compound layout is stable.
        *   **8. Comprehensive Testing:**
            *   Status: **PENDING**. Full testing blocked until compound layout is stable and error-free. Initial tests for non-compound layout and undefined data handling can proceed.

    *   **D. Key UI/UX Improvements Addressed by this Rebuild:**
        *   (No changes from PRD v3.2.1 - these remain the goals)

    *   **E. Expected Outcome / Definition of Done for this Step:**
        *   (No changes from PRD v3.2.1 - these remain the goals. Current progress is focused on achieving stable Dagre compound layout and addressing UI consistency.)

**3. Full PRD Update & Documentation Synchronization (Completion of Initial Pass):**
    *   Status: **COMPLETED** (This document, v3.3.0, represents the synchronized PRD. Auxiliary documents mentioned in v3.2.1 are considered superseded by this version unless explicitly stated otherwise).

**(Phases 2 & 3 remain as defined in PRD v3.2.1, with their status as PENDING)**

**10. Testing Strategy**
*(Updates based on recent findings and debugging, particularly the initial undefined `graphData` state and the nature of the Dagre layout error)*

**Testing Suite Status (as of May 20, 2025):**
*   (No change from PRD v3.2.1 regarding deprecated backend tests and frontend test refactoring needs).
*   **Key Debugging Insight Reflected in Testing:**
    *   The `dagre.layout(g)` call within `layoutUtils.js` can successfully lay out a non-compound graph when `graphData` is present and Dagre's `compound` option is `false`.
    *   The previously observed `TypeError` ("Cannot set properties of undefined (setting 'rank')") appears linked specifically to Dagre's processing of *compound graphs* (`compound: true` and `g.setParent` calls). Testing will need to focus on this area once compound features are re-enabled.
    *   `RelationshipMapperContent` initially renders with `props.graphData` as `undefined`. Tests must cover this initial state and the subsequent transition to a data-driven layout.
*   The primary utility mapper test file is now `storyforge/backend/tests/utils/notionPropertyMapper.test.js`. This file requires ongoing review and expansion.
*   Frontend tests for `RelationshipMapper` and related components need significant refactoring.

*   **10.1. Unit Tests:**
    *   **Frontend:**
        *   `useGraphTransform.js`:
            *   Verify correct handling of initial `undefined` or empty `graphData` (should produce 0 nodes/edges).
            *   Critical unit tests for `parentId` assignment logic.
            *   Test formation of `nodes` and `edges` including the `parentNode` attribute.
        *   `layoutUtils.js` (`getDagreLayout`):
            *   Test behavior with 0 nodes/edges (initial call before `graphData` is loaded or if `graphData` is empty), ensuring it returns empty arrays gracefully.
            *   Verify that returned nodes have valid, numerically-defined positions when layout is successful (both for non-compound and, eventually, compound graphs).
            *   Test that the fallback positioning logic in the `catch` block correctly assigns distinct, staggered positions if `dagre.layout(g)` throws an error.
            *   Once compound features are re-enabled: Add tests for successful simple compound graph layouts. Add tests to simulate graph structures known to potentially cause issues for Dagre's ranking with compound nodes (e.g., cycles involving parent-child declarations, invalid parent IDs after filtering) and ensure robust error handling or graceful degradation.
        *   *(Other items as per PRD v3.2.1 for `EntityNode.jsx`, `CustomEdge.jsx`, `filterGraph.js`)*
*   **10.2. Integration Tests:**
    *   **Frontend:**
        *   Test the full component lifecycle of `RelationshipMapper` and its children:
            *   Initial render with `undefined` `graphData` (verify no errors, perhaps a loading state).
            *   Re-render when `graphData` becomes populated.
            *   Flow from `graphData` through `useGraphTransform.js` to `getDagreLayout`, and finally to the nodes/edges rendered by React Flow.
        *   Verify that once `graphData` is populated and Dagre layout (initially non-compound, eventually compound) succeeds, parent-child relationships (for compound) are correctly established and rendered hierarchically.
        *   Test interactions with the simplified control panel, **ensuring it is accessible and functional in both normal and fullscreen modes.**
*   **10.3. End-to-End (E2E) Tests:**
    *   (As per PRD v3.2.1, with added emphasis):
        *   Simulate user scenarios, including those where `graphData` might be slow to load, ensuring a proper loading state appears and the graph renders correctly once data arrives.
        *   Verify correct visual rendering of compound nodes (items in containers, puzzle elements grouped with puzzles) once the Dagre issues are resolved and compound features are re-enabled and stable.
        *   **Specifically test the visibility, layout, and functionality of the map controls panel in fullscreen mode across various scenarios.**
*   **10.4. Manual & Exploratory Testing:**
    *   (As per PRD v3.2.1, with added emphasis):
        *   Thoroughly test the map's behavior during the transition from no data (initial load) to a fully rendered graph.
        *   After re-enabling compound nodes, systematically test with diverse datasets (especially "Alex Reeves's Map") to identify specific structures or conditions that might trigger the Dagre ranking/layout error.
        *   Evaluate the visual result of the `isActualParentGroup` styling from `EntityNode.jsx` once compound layout is working.
        *   Verify behavior of the fullscreen controls panel.

This testing strategy, with tests being added and updated alongside the focused rebuild as per the Action Plan (Section 9), will serve as a blueprint for building a resilient and reliable StoryForge application.

---
