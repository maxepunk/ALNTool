**Revised & Consolidated Project Request Document: StoryForge - Immersive Narrative Design Hub**

**Document Version:** 3.2.1
**Date:** May 19, 2025
**Document Purpose:** This document provides the comprehensive and unified specification for the StoryForge tool. It reflects the outcomes of an architectural and codebase review (May 2025), incorporates a definitive understanding of the existing "About Last Night" Notion workspace structure, details the current and planned data flow for the Relationship Mapper, includes detailed User Personas and Use Cases, and contains the current detailed Action Plan for ongoing development. It is intended to serve as the gold-standard reference.

**1. Project Background: The "About Last Night" Experience**
*   **Game:** "About Last Night... an Immersive Crime Thriller" (Internal Codename: "Recovery State")
*   **Overview:** A 90-minute, in-person immersive experience for 5-35 players in a near-future Silicon Valley setting. It combines escape room puzzles, role-play, social deduction, and strategic trading.
*   **Premise:** Players awaken in a warehouse post-party, memories fragmented, with CEO Marcus Blackwood dead.
    *   **Act 1: Murder Mystery:** Players investigate Marcus's death, recover "elements" (including physical/digital items representing memories), and build theories.
    *   **Act 2: Memory Trading & Deeper Conspiracy:** Discovery of a "memory reader" (RFID-based) reveals certain elements (specifically those designated as "memories") as tradable commodities. Marcus's death is revealed as self-inflicted due to memory-altering drug experiments. A countdown begins as memories risk irreversible corruption.
*   **Player Choices/Endings:** Cooperate with "The Detective," sell memories to the "Black Market," or work to recover personal memories.
*   **Central Mechanics:** Element Recovery (including Memory recovery), Puzzle Solving, Role-Playing & Social Deduction, Strategic Trading (Act 2).

**2. Project Overview & Goals (StoryForge Tool)**
*   **Project Name:** StoryForge
*   **Tool Goal:** To develop a custom web-based front-end design tool that uses the existing "About Last Night" Notion workspace (as defined in Section 4) as its backend. StoryForge will provide a visually intuitive, interconnected, and role-optimized environment for designing, managing, and iterating on the immersive narrative experience.
*   **Primary Objectives:**
    *   **Visualize Connections:** Enable easy understanding of relationships between Characters, Timeline Events, Puzzles, and Elements (including specialized Memory-type Elements).
    *   **Streamline Workflows:** Offer dedicated views and tools tailored for different team roles (Narrative Designer, Writer, Puzzle Designer, Asset Manager).
    *   **Centralize & Enhance Data Access:** Provide a more structured and interactive way to access and modify data stored in Notion databases.
    *   **Facilitate Iteration & Scaling:** Support ongoing design changes, ensure narrative consistency, and manage the complexity of a growing narrative.
    *   **Support Design Process:** Address interdependencies, timeline management, act structure, physical prop management, and playtesting.

**3. Core Technology Stack**
*   **Backend Data Store:** **Existing Notion Workspace** (via Notion API). *This is a critical constraint. The structure defined in Section 4 is the target.*
*   **Frontend Framework:** React (as implemented).
*   **Visualization Libraries:** `@xyflow/react` (React Flow) is the primary visualization library used.
*   **State Management:** React Query (as implemented for API service layer) and Zustand. Zustand is currently used for client-side UI state (e.g., within the Relationship Mapper); the complexity of this client-side state may be reduced with the focused rebuild of the Relationship Mapper, which simplifies its UI controls and layout options.
*   **Styling:** Material UI with a dark theme (as implemented).
*   **Backend-for-Frontend (BFF) / Middleware:** Node.js with Express.js (as implemented). This BFF handles Notion API interactions, caching (using `node-cache`), complex data transformations (including generation of rich `graphData` for visualization as per Section 4.E), and secure API key management.

**4. Notion Backend Structure (Definitive Gold Standard)**

StoryForge **must** read from and write to the Notion workspace structured with the following 4 primary databases. Property names and types provided below are based on the May 2025 codebase review and successful Phase 1 integration.

**Important Note on "Memory-Specific" Fields within the Elements Database:**
The `Elements` database serves as a general store for all items, including those that function narratively as "Memories." For a minimal set of memory-specific attributes not covered by existing dedicated Notion properties, a strategy of embedding structured data within the `Description/Text` field will be used.
*   **Strategy for Handling (Minimal Implementation - Read-Only Focus Initially):**
    1.  **Data Entry Template:** For the initial minimal implementation (Action Plan Phase 2, Step 5), memory-specific attributes will be entered on their own line within the `Description/Text` field of an Element, prefixed with `SF_`. The primary attribute to be implemented is `SF_RFID: [value]` (e.g., `SF_RFID: 12345`). This specific key-value pair will be parsed.
    2.  **BFF Responsibility (Read):** For Elements identified as memories (e.g., via `Basic Type` like "Memory Token Video", "Corrupted Memory RFID"), the BFF (`storyforge/backend/src/utils/notionPropertyMapper.js`) will parse the `Description/Text` content to extract the `SF_RFID` attribute if present.
    3.  **Frontend Display:** The frontend (`storyforge/frontend/src/pages/ElementDetail.jsx`) will display this parsed `SF_RFID` attribute in the "Memory Data" section if available on the element data object.
    4.  **Future - Editing (Write Responsibility):** (Out of scope for initial minimal implementation) When/if editing these embedded attributes is implemented in StoryForge, the tool will need to update the structured information within the `Description/Text` field carefully, preserving other content.
    5.  **Future - Adding New Notion Properties (Last Resort):** If this minimal embedded attribute proves insufficient or if parsing becomes unmanageable for other critical, frequently filtered fields, adding new explicit properties to the Notion `Elements` database will be considered.

**(A) Characters Database**
*   **Notion DatabaseID:** `18c2f33d583f8060a6abde32ff06bca2`
*   **Properties:** (Verified against codebase and sample data)
    *   `Name` (Title - Primary Key)
    *   `Type` (Select: "Player", "NPC")
    *   `Tier` (Select: "Core", "Secondary", "Tertiary")
    *   `Character Logline` (Text)
    *   `Overview & Key Relationships` (Rich Text)
    *   `Emotion towards CEO & others` (Text)
    *   `Primary Action` (Text - Primary goal at the party)
    *   `Events` (Relation to `Timeline` DB - `Timeline.Description`)
    *   `Character Puzzles` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Owned Elements` (Relation to `Elements` DB - `Elements.Name`)
    *   `Associated Elements` (Relation to `Elements` DB - `Elements.Name`)
    *   `Connections` (Number)
    *   *(Content from individual Character MD files is represented by an `Owned Element` of `Basic Type`: "Character Sheet". The `Description/Text` of that Element contains the sheet content.)*

**(B) Timeline Database (Events)**
*   **Notion DatabaseID:** `1b52f33d583f80deae5ad20020c120dd`
*   **Properties:** (Verified)
    *   `Description` (Title - Primary Key, e.g., Event title)
    *   `Date` (Date)
    *   `Characters Involved` (Relation to `Characters` DB - `Characters.Name`)
    *   `Memory/Evidence` (Relation to `Elements` DB - `Elements.Name`)
    *   `mem type` (Text/Select - e.g., "Prop", "Set Dressing", "Memory Token Video")
    *   `Notes` (Rich Text)

**(C) Puzzles Database**
*   **Notion DatabaseID:** `1b62f33d583f80cc87cfd7d6c4b0b265`
*   **Properties:** (Verified)
    *   `Puzzle` (Title - Primary Key, e.g., Puzzle name)
    *   `Owner` (Relation to `Characters` DB - `Characters.Name`)
    *   `Locked Item` (Relation to `Elements` DB - `Elements.Name`)
    *   `Puzzle Elements` (Relation to `Elements` DB - `Elements.Name`, i.e., elements required for the puzzle)
    *   `Rewards` (Relation to `Elements` DB - `Elements.Name`, i.e., elements rewarded by the puzzle)
    *   `Story Reveals` (Text or Relation to `Timeline` DB - `Timeline.Description`)
    *   `Timing` (Select, e.g., "Act 1", "Act 2")
    *   `Parent item` (Relation to self - `Puzzles.Puzzle`, for sub-puzzles)
    *   `Sub-Puzzles` (Relation to self, multiple - `Puzzles.Puzzle`, for parent puzzles listing sub-puzzles)
    *   `Asset Link` (URL, e.g., Canva links)
    *   `Description/Solution` (Rich Text)
    *   `Narrative Threads` (Multi-select Text or individual Text properties if preferred for Notion filtering)

**(D) Elements Database**
*   **Notion DatabaseID:** `18c2f33d583f802091bcd84c7dd94306`
*   **Properties:** (Verified)
    *   `Name` (Title - Primary Key)
    *   `Owner` (Relation to `Characters` DB - `Characters.Name`)
    *   `Basic Type` (Select - e.g., "Prop", "Set Dressing", "Memory Token Video", "Memory Token Audio", "Memory Token Physical", "Corrupted Memory RFID", "Character Sheet", "Document", "Digital File", "Clue", "Container")
    *   `Description/Text` (Rich Text - Sourced from MD bodies. For memory-type Elements, this field will also contain structured data for minimal memory-specific attributes like `SF_RFID: [value]` as defined in the strategy above. The broader list of attributes such as `Memory ID`, `Memory Title`, `Memory Type (Narrative)`, `Content (for text memories)`, `Corruption Status`, `Value Indicator`, `Puzzle Integration Type`, `Puzzle Notes` are for future consideration if the minimal approach is insufficient.)
    *   `Container` (Relation to self - `Elements.Name`, i.e., this element is *inside* another element)
    *   `Contents` (Relation to self, multiple - `Elements.Name`, i.e., this element *is* a container and lists items inside)
    *   `Container Puzzle` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Required For (Puzzle)` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Rewarded by (Puzzle)` (Relation to `Puzzles` DB - `Puzzles.Puzzle`)
    *   `Timeline Event` (Relation to `Timeline` DB - `Timeline.Description`)
    *   `Associated Characters` (Relation to `Characters` DB - `Characters.Name`)
    *   `Narrative Threads` (Multi-select Text or individual Text properties)
    *   `First Available` (Select, e.g., "Act 0", "Act 1", "Act 2")
    *   `Status` (Select - e.g., "Ready for Playtest", "Done", "In development", "Idea/Placeholder", "Source Prop/print", "To Design", "To Build", "Needs Repair")
    *   `Files & media` (Files & Media - For images, audio files, video files directly uploaded to Notion)
    *   `Content Link` (URL - For links to external files like Canva, Google Docs, or video/audio hosting if not using `Files & media`)
    *   `Production/Puzzle Notes` (Text)
    *   *(`Container?` (Boolean) - Consider for formal support based on sample CSV)*
    *   *(`Puzzle Chain` (URL/Relation) - Consider for formal support based on sample CSV)*

**(E) BFF `graphData` Object Specification (for Relationship Mapper)**
(Specification remains current and accurate based on code review of `notionController.js` helpers `_createGraphNodeInternal` and `_createGraphEdgeInternal`. The following fields within the `graphData` object are particularly critical for the Relationship Mapper's focused hierarchical layout strategy:
*   `nodes[n].id`, `nodes[n].name`, `nodes[n].type`, and `nodes[n].properties`: Essential for node rendering, labeling, and differentiation.
*   `edges[e].source`, `edges[e].target`, `edges[e].label`: Define basic connectivity and on-edge textual labels.
*   `edges[e].data.shortLabel`: Critically important, as the frontend logic in `useGraphTransform.js` relies on specific `shortLabel` values (e.g., "Contains," "Required For," "Rewards") to programmatically assign `parentId` attributes to nodes. This `parentId` assignment is the foundation for creating visual groupings using Dagre compound nodes and React Flow's parent rendering.
*   `edges[e].data.contextualLabel`: Used for detailed tooltips on edges.
The frontend's ability to effectively group related nodes (e.g., container contents, puzzle inputs/outputs) is directly dependent on the consistency and accuracy of these labels, especially `shortLabel`, originating from the BFF.)
'''json
{
  "center": { /* Fully mapped central entity object, matching structure of a node below */ },
  "nodes": [
    {
      "id": "string_entity_id",
      "name": "string_display_name",
      "type": "string_entity_type",
      "fullDescription": "string_long_form_description_for_tooltip",
      "descriptionSnippet": "string_short_snippet_for_tooltip",
      // Type-specific enriched properties (from `_createGraphNodeInternal` in BFF):
      // For Character:
      "tier": "string_tier_value",
      "role": "string_player_or_npc",
      "primaryActionSnippet": "string_snippet_of_primary_action",
      // For Puzzle:
      "timing": "string_act_timing",
      "statusSummary": "string_e_g_requires_x_rewards_y",
      "storyRevealSnippet": "string_snippet_of_story_reveals",
      "ownerName": "string_character_name_if_any",
      "ownerId": "string_character_id_if_any",
      // For Element:
      "basicType": "string_element_basic_type",
      "status": "string_production_status",
      "flowSummary": "string_e_g_owner_x_required_for_y_rewarded_by_z",
      // For Timeline:
      "dateString": "string_formatted_date",
      "participantSummary": "string_e_g_involves_x_chars_y_elements",
      "notesSnippet": "string_snippet_of_notes"
    }
  ],
  "edges": [
    {
      "source": "string_source_node_id",
      "target": "string_target_node_id",
      "label": "string_simple_relationship_label",
      "data": {
        "sourceNodeName": "string_source_node_display_name",
        "sourceNodeType": "string_source_node_type",
        "targetNodeName": "string_target_node_display_name",
        "targetNodeType": "string_target_node_type",
        "contextualLabel": "string_detailed_human_readable_label_for_tooltips",
        "shortLabel": "string_concise_label_for_on_path_display_and_grouping_logic"
      }
    }
  ]
}
'''

**5. Feature Breakdown & Development Phases**

All feature development, phasing, and detailed tasks are now managed under the **"Revised Action Plan: StoryForge Refinement & Advancement"** detailed in Section 9 of this document. Old milestone lists or feature breakdowns in previous versions of this PRD are superseded by Section 9.

**6. User Personas, Workflows, Relationship Mapper Use Cases & UX Principles**

This section details the primary users of StoryForge, their core tasks related to game design and development, how the Relationship Mapper views for each entity type are intended to support their workflows, and the UX principles guiding graph clarity. Understanding these user-centric scenarios is crucial for refining existing features and guiding future development.

**A. Primary User Personas / Roles:**

*   **P1: Narrative Designer (Lead Story Architect)**
    *   **Responsibilities:** Oversees the overall story arc, plot development, character motivations and arcs, thematic consistency, and narrative coherence across all game components (puzzles, elements, events). Ensures the player experience aligns with the intended narrative journey.
    *   **Core Tasks in StoryForge:**
        *   Reviewing and validating connections between characters, events, puzzles, and critical story elements.
        *   Identifying plot holes or inconsistencies in the narrative web.
        *   Tracking how key narrative threads (e.g., "CEO's Corruption," "Memory Drug Side Effects") propagate through various game components.
        *   Visualizing character relationship networks and their evolution.
        *   Ensuring puzzle solutions and element discoveries align with story progression.
*   **P2: Writer (Content Creator)**
    *   **Responsibilities:** Focuses on dialogue, scripts, in-game text (e.g., item descriptions, documents), character voice, and detailed descriptive content for elements, events, and locations.
    *   **Core Tasks in StoryForge:**
        *   Accessing detailed information about characters, elements, and events to ensure their writing is contextually accurate.
        *   Understanding the relationships an element has to write compelling descriptions or associated text.
        *   Reviewing how their written content (e.g., a clue found on an element) connects to puzzles or character knowledge.
*   **P3: Puzzle Designer (Mechanics & Flow Engineer)**
    *   **Responsibilities:** Designs, implements, and tests puzzles. Manages puzzle dependencies (what elements are required, what elements/information are rewarded), solvability, difficulty, and thematic integration with the narrative.
    *   **Core Tasks in StoryForge:**
        *   Visualizing the flow of a puzzle chain: inputs (required elements/info), internal steps/sub-puzzles, and outputs (reward elements/info, story reveals).
        *   Identifying all elements linked to a specific puzzle (required, rewarded, or locked by it).
        *   Ensuring puzzles don't create narrative dead-ends or require unobtainable items.
        *   Checking if a puzzle's reward correctly unlocks the next intended step in the story or another puzzle.
*   **P4: Asset Manager (Element & Prop Logistics)**
    *   **Responsibilities:** Tracks all physical and digital game elements (props, clues, media files, documents), their current status (e.g., "To Build," "Ready for Playtest"), location, and connections to other game components (characters, puzzles, events).
    *   **Core Tasks in StoryForge:**
        *   Quickly identifying all information about a specific element: its description, what puzzles it's used in, who owns it, what event it's related to.
        *   Understanding the "blast radius" of an element – if this element is changed or removed, what other parts of the game are affected?
        *   Managing container relationships (what's inside what).
        *   Tracking the status and availability of elements needed for playtesting specific scenes or puzzles.

**B. Entity-Specific Map Use Cases & Workflows (for Relationship Mapper):**

*   **B.1. Character Map (Viewing from a Character's Detail Page):**
    *   **Narrative Designer:** "How does this Character connect to the main plot points (Timeline Events)? What Puzzles are they crucial for? What key Elements do they own or are associated with that drive their story?"
    *   **Writer:** "What are this Character's key relationships (to other Characters, critical Elements, or Events) that I need to reflect in their dialogue or backstory?"
    *   **Use Case Example:** Viewing Alex Reeves' map to see direct links to "CEO's Office Confrontation" (Timeline Event), "Personal Safe" (Puzzle), and "Encrypted Hard Drive" (Owned Element).

*   **B.2. Element Map (Viewing from an Element's Detail Page):**
    *   **Asset Manager:** "Where is this Element used? Is it a reward for a Puzzle? Required for another? Who owns it? Is it evidence in a Timeline Event?"
    *   **Puzzle Designer:** "If this Clue (Element) is found, what Puzzles does it help solve? If it's a reward from Puzzle A, is it correctly linked as a requirement for Puzzle B?"
    *   **Narrative Designer:** "How does this specific Element (e.g., a 'Memory Token') connect to the larger narrative? Which Characters interact with it? Which Events does it illuminate?"
    *   **Use Case Example:** Viewing the "CEO's Diary" (Element) map to see it's a reward from the "Desk Drawer Lockbox" (Puzzle), is owned by "Marcus Blackwood" (Character), and contains clues related to the "Warehouse Party Setup" (Timeline Event).

*   **B.3. Puzzle Map (Viewing from a Puzzle's Detail Page):**
    *   **Puzzle Designer:** "What Elements are needed to solve this Puzzle? What Elements or information does it reward? Are there any sub-puzzles or is it part of a larger chain? Which Character is intended to solve or own this puzzle?"
    *   **Narrative Designer:** "Does this Puzzle appropriately gate a key Story Reveal or an important Element? Is its timing correct within the Act structure?"
    *   **Use Case Example:** Viewing the "Decrypt RFID Data" (Puzzle) map to see it requires "Corrupted Memory RFID" (Element) and "RFID Reader" (Element), and rewards "Decrypted CEO's Message" (Element).

*   **B.4. Timeline Event Map (Viewing from an Event's Detail Page):**
    *   **Narrative Designer:** "Which Characters were involved in this Event? What key Elements (memories, evidence) are associated with it? Does this Event logically connect to preceding or succeeding Events?"
    *   **Writer:** "Who was present at this Event and what significant items were there, to ensure my scene descriptions or character recollections are accurate?"
    *   **Use Case Example:** Viewing the "Security Breach" (Timeline Event) map to see "Victoria Kingsley" (Character) and "Maintenance Crew" (Character group) were involved, and "Security Footage VHS" (Element) is key evidence.

**C. Implications for Dashboard Design (Future Consideration):**

While the dashboard is currently a placeholder, understanding these personas and workflows will be vital when designing it. The dashboard should ideally provide:
*   Quick access to recently viewed/edited items per user.
*   Overviews relevant to each role (e.g., Narrative Designer might see a list of unresolved plot threads or unlinked critical elements; Puzzle Designer might see puzzles with missing required elements).
*   Global search functionality.
*   Notifications or alerts for items needing attention (e.g., an Element marked "To Build" that's required for an upcoming playtest).

**D. UX Principles for Graph Clarity in Relationship Mapper:**

*   **Tell a Story, Don't Just Show Data:** The graph should intuitively guide the user through the most relevant connections. This means prioritizing relationships that are key to understanding the central entity's role and narrative function.
*   **Reduce Cognitive Load:** Avoid overwhelming the user with a "hairball" of lines. The layout should be clean, and connections should be easy to follow.
*   **Optimized Information Display on Nodes & Edges (Leveraging Color and Hover Text):**
    *   **Principle:** Provide the right amount of information at the right time, balancing immediate visual clarity with access to comprehensive details. This involves minimizing on-node/on-edge text by strategically using color-coding and making detailed information readily available via hover interactions (tooltips).
    *   **Implementation - Node Information Strategy:**
        *   **Color-Coding for Type Identification:**
            *   *Node Body:* The primary visual cue for an entity's fundamental type (Character, Element, Puzzle, Timeline) will be its background color and associated icon, as currently defined in `EntityNode.jsx` (via `getEntityPresentation`). This allows users to quickly differentiate node categories without reading explicit type labels on every node.
            *   *Node Chips:* Secondary attributes (e.g., an Element's `Basic Type` like "Prop" or "Container", a Character's `Tier` like "Core") will be displayed as small, color-coded chips on the node. Chip colors will be consistent with their primary entity type or a distinct scheme if representing sub-status, providing another layer of quick visual information.
        *   **Dynamic & Contextual Node Labels:**
            *   *Minimal Default Labels:* At wider zoom levels or for less central nodes, on-node text labels will be kept to a minimum – potentially showing only a truncated version of the entity's `Name` (from `graphData.nodes[n].name`) or a highly abbreviated identifier. The goal is to ensure node distinctiveness without clutter.
            *   *Zoom-Based Detail Expansion:* As users zoom in, node labels will progressively reveal more of the `Name`. This will be handled within `EntityNode.jsx` by responding to React Flow's zoom state.
            *   *Central/Selected Node Emphasis:* The central entity of the map and any user-selected nodes may display slightly more label detail by default.
        *   **Comprehensive Tooltips for Detail-on-Demand:**
            *   *Primary Detail Source:* Tooltips (activated on hover, managed by `EntityNode.jsx` and its `NodeTooltipContent` sub-component) will serve as the primary mechanism for accessing the full details of an entity. This keeps the main map display clean.
            *   *Tooltip Content:* Tooltips will display:
                *   Full `Name` (e.g., `graphData.nodes[n].name`).
                *   Entity `Type` (e.g., `graphData.nodes[n].type`).
                *   Key type-specific properties derived from `graphData.nodes[n].properties` (e.g., for a Character: `Tier`, `Role`, `Primary Action Snippet`; for a Puzzle: `Timing`, `Status Summary`; for an Element: `Basic Type`, `Status`, `Flow Summary`; for a Timeline event: `Date`, `Participant Summary`).
                *   Full descriptions (`graphData.nodes[n].fullDescription`) if available, especially in fullscreen mode or for central/selected items.
    *   **Implementation - Edge Information Strategy:**
        *   **Color-Coding for Relationship Category:**
            *   Edge colors will continue to be a primary means of differentiating the *category* of a relationship, as defined in `transformToGraphElements.js` (`edgeStyles`) and rendered by `CustomEdge.jsx`. For example:
                *   `dependency` edges (Orange): For "Requires," "Rewards" links to Puzzles.
                *   `containment` edges (Light Blue, dashed): For "Contains," "Inside" links for Elements.
                *   `character` edges (Indigo): For "Owns," "Associated With" involving Characters.
                *   `timeline` edges (Pink): For "Participates In," "Evidence For" involving Timeline events.
                *   `association` (Green) / `default` (Grey) for other types.
            *   This color-coding helps users rapidly understand the nature of connections without needing to read every label.
        *   **Concise On-Edge Labels:**
            *   On-edge text labels will display the `shortLabel` (e.g., "Owns," "Requires," "Contains") from `graphData.edges[e].data.shortLabel`. These should be brief and directly indicative of the relationship type.
        *   **Contextual Tooltips for Full Edge Semantics:**
            *   Tooltips on edges (managed by `CustomEdge.jsx`) will display the full `contextualLabel` (e.g., "Character A (Character) --Owns--> Element B (Prop)") from `graphData.edges[e].data.contextualLabel`, providing unambiguous detail about the source, target, and relationship when needed.
    *   **Benefit:** This multi-layered approach (color -> concise on-screen labels -> detailed tooltips) minimizes visual noise on the map itself, making it cleaner and easier to scan for patterns and primary connections. Detailed information remains easily accessible on demand, supporting both quick overviews and in-depth exploration. This directly aligns with the goal of reducing cognitive load and making the map more intuitive.

**7. Assumptions & Dependencies**
*   **The Notion workspace structured precisely according to Section 4 is maintained.** Unauthorized changes to this Notion structure will break the tool.
*   Notion API remains stable, accessible, and its features support the required operations.
*   The initial data import from source CSVs and Markdown files has correctly established the baseline content and structure in Notion.
*   **The BFF's `/graph` endpoints consistently provide valid `graphData` objects structured according to Section 4.E.** The frontend `RelationshipMapper` now uses this `graphData` as its sole source for graph construction.

**8. Future Considerations (Out of Scope for current phases unless specified in Action Plan - Section 9)**
*   Full, robust parsing (beyond minimal `SF_RFID`) of structured data from Rich Text for memory attributes, if the minimal approach (Action Plan Phase 2, Step 5) proves insufficient long-term.
*   **Re-evaluation of true Dagre compound node capabilities...** (This item is now addressed by the focused rebuild outlined in Action Plan Section 9, Phase 1, Step 2, which adopts Dagre compound nodes as the core strategy.)
*   **Enhanced Interactive Group Management:**
    *   Interactive in-place node expansion/collapse for compound groups within the Relationship Mapper (e.g., allowing users to collapse a Puzzle's inputs/outputs or a Container's contents to reduce clutter on demand). This is now more feasible with the adoption of a true compound node architecture.
    *   Consideration for user-defined or dynamic grouping beyond the automatic semantic grouping if advanced use cases emerge.
*   **Advanced Filtering & Highlighting:**
    *   More sophisticated filtering options beyond simple type toggles (e.g., filter by specific narrative threads, status, or custom tags if added to data).
    *   Path highlighting between selected nodes or to trace specific relationship chains.
*   Visual diffing of narrative states or versions.
*   Integration with a dedicated task management or playtesting feedback system.
*   Advanced "narrative health check" analytics (e.g., identifying orphaned elements, unlinked puzzles, or circular dependencies – the new layout might make some of these more visually apparent).
*   Mobile/tablet responsiveness for read-only viewing.
*   **Refined Layout Customization (Post-Rebuild):** Once the core Dagre compound node layout is stable and effective, minor, well-justified layout customization options (e.g., alternative Dagre orientations like 'LR' if beneficial for specific views, or user-adjustable spacing parameters within defined limits) could be revisited if strong user needs emerge, but the primary goal remains a highly effective default.

**9. Action Plan & Next Steps**

This section outlines the current, active plan for StoryForge refinement and advancement as of May 19, 2025.

**Overarching Goal for All Phases:** Ensure all project documentation is consistent and up-to-date, with this `StoryForge PR.txt` document serving as the definitive "gold standard" source of truth. Progress will be tracked at each step.

**Development Methodology Notes:**
*   **Branching:** All work for this action plan should occur on dedicated feature branches, which are then merged into `master` via Pull Requests.
*   **Iterative Work & Canvas Usage (If applicable with AI Assistant):** For complex modifications, AI assistant's canvas features might be used for temporary versions before finalizing code. Push updates to feature branches at appropriate checkpoints.

**Phase 1: Codebase Hygiene, Documentation Synchronization & Critical Mapper UX Foundation**
*Focus: Cleaning up, ensuring documentation is accurate, and making immediate high-value improvements to the Relationship Mapper's core usability.*

1.  **Initial PRD Synchronization & Technical Debt Cleanup Kick-off (Concurrent Processes):**
    *   **1A. PRD Gold Standard - Initial Pass & Version Bump:**
        *   *Why:* Ensure PRD is a reliable source of truth.
        *   *Where:* `StoryForge PR.txt` document (this document).
        *   *What:* Identified major outdated sections. Updated document progressively to v3.2 to reflect current codebase and plans.
        *   **Status: COMPLETED**

    *   **1B. Technical Debt Cleanup & Code Refinements (High Priority - Ongoing):**
        *   *Why:* Remove confusing, non-functional, or redundant code. Fix dependency issues for clarity, stability, and consistency.
        *   *Tasks & Specific File Locations:*
            *   **Backend Tests:**
                *   Delete deprecated test files: `storyforge/backend/tests/utils/propertyMapper.test.js`, `storyforge/backend/tests/utils/notionPropertyMapperAsync.test.js`, `storyforge/backend/tests/integration/puzzleEndpoints.test.js`.
                *   **Status: COMPLETED** (Manually deleted from `dev-phase1-updates` branch before merge to master on May 19, 2025)
            *   **Backend Dependencies:**
                *   Add `node-cache` to dependencies in `storyforge/backend/package.json`.
                *   **Status: COMPLETED** (Merged to master on May 19, 2025)
            *   **Backend Logic:**
                *   Refactor `globalSearch` in `storyforge/backend/src/controllers/notionController.js` for robust mapper name generation.
                *   **Status: COMPLETED** (Merged to master on May 19, 2025)
            *   **Frontend Tests:**
                *   Delete or heavily refactor `storyforge/frontend/src/components/RelationshipMapper/RelationshipMapper.test.jsx` (currently tests outdated `relationshipData` prop). Migrate valuable interaction tests to a `graphData`-centric approach.
                *   **Status: COMPLETED (Marked for manual deletion on May 19, 2025)**
            *   **Frontend Utils:**
                *   Investigate and likely delete `storyforge/frontend/src/components/RelationshipMapper/relationshipUtils.js` (contains remnants of an old client-side graph construction approach, likely unused).
                *   **Status: COMPLETED (Marked for manual deletion on May 19, 2025)**
            *   **Frontend Dependencies:**
                *   Remove `react-flow-renderer` from `storyforge/frontend/package.json`.
                *   **Status: COMPLETED** (Merged to master on May 19, 2025)
                *   Remove duplicate `@xyflow/react` from the root `package.json`.
                *   **Status: COMPLETED** (Merged to master on May 19, 2025)
                *   Verify/correct Playwright version in `storyforge/frontend/package.json`.
                *   **Status: COMPLETED (Verified on May 19, 2025 - version is current and correct)**
            *   **Frontend Logic:**
                *   Review and refine edge styling logic in `storyforge/frontend/src/components/RelationshipMapper/transformToGraphElements.js`.
                *   **Status: COMPLETED** (Merged to master on May 19, 2025)
        *   *What (Achieved/Goal):* A cleaner, more maintainable codebase. Updated `package.json` files. Fewer misleading/broken tests.

2.  **RelationshipMapper - Focused Rebuild for Core UX & Layout Foundation (High Priority):**

    *   **A. Rationale for Rebuild & Goals:**
        *   **UI/UX Challenges with Previous Approach:** Extensive testing and user feedback (including analysis of visual outputs from "Alex Reeves's Map" and others) revealed that the prior multi-layout strategy ("Dagre + Orbiting," Radial, Force-Directed) and manual orbiting logic for Dagre layouts did not consistently or clearly meet core user needs. Key issues included:
            *   **Failure to "Tell a Story":** Maps did not provide an at-a-glance understanding of crucial hierarchical relationships, such as the contents of a container Element or the set of elements involved in a Puzzle.
            *   **High Cognitive Load:** Users were required to manually trace numerous edges and interpret truncated labels to understand fundamental groupings.
            *   **Ineffective Visual Grouping:** The "Dagre + Orbiting" strategy, despite iterations, failed to produce distinct and intuitive visual clusters for parent-child relationships (e.g., an Element and its contained items; a Puzzle and its inputs/outputs). The manual "orbiting" often resulted in child nodes appearing disconnected or arbitrarily placed relative to their intended parent.
            *   **Label Truncation:** Aggressive label truncation made many nodes unidentifiable without interaction, severely hindering quick comprehension.
            *   **UI Inconsistencies:** Issues like the inconsistent visibility of map controls (especially in fullscreen mode) detracted from usability.
        *   **Engineering Complexity:** Supporting multiple complex layout algorithms (Radial, Force-Directed, and the manual Dagre+Orbiting) with their distinct state management and UI controls led to significant code complexity in `layoutUtils.js`, `useGraphTransform.js`, `RelationshipMapper.jsx`, `useLayoutManager.js`, and `useRelationshipMapperUIState.js`. This complexity made the system difficult to debug, maintain, and extend reliably.
        *   **Strategic Decision:** Based on these findings, a decision has been made to undertake a focused rebuild of the Relationship Mapper's core layout and rendering logic. This rebuild prioritizes a single, robust, and clear hierarchical layout strategy designed to effectively visualize the narrative structure as defined by the user personas and use cases (PRD Section 6.B).
        *   **Primary Goal:** To deliver a Relationship Mapper that is intuitive, provides clear visual groupings for key hierarchical relationships (containers, puzzles), significantly reduces cognitive load, and is built on a more maintainable and focused engineering foundation.

    *   **B. Revised Architectural Approach for Relationship Mapper:**
        *   **Input Data Structure:** The mapper will continue to consume the `graphData` object (nodes and edges with their properties, including `edge.data.shortLabel`) provided by the Backend-for-Frontend (BFF) as specified in PRD Section 4.E. The integrity and richness of this `graphData` are paramount.
        *   **Primary Layout Strategy (Exclusive):**
            *   **Engine:** Dagre (`dagre.js`) will be the *exclusive* graph layout engine used. Alternative layout options (Radial, Force-Directed) and their associated UI controls will be removed. This simplifies the user experience and development effort.
            *   **Layout Orientation:** A default orientation (e.g., 'TB' - Top-to-Bottom) will be chosen for consistency, particularly for Character and Puzzle maps. If specific views demonstrably benefit from other orientations (e.g., 'LR' for certain Element or Timeline views), this could be a configurable option passed to the Dagre layout, but the primary aim is a single, highly effective default.
        *   **Visual Grouping Mechanism (Compound Nodes):**
            *   **Logical Group Identification:** The frontend (`useGraphTransform.js`) will continue to parse `graphData` to identify logical parent-child relationships. Specifically, `node.data.parentId` will be assigned to:
                *   Element nodes that are `Contains`-ed within another Element node (the container).
                *   Element nodes that are `Required For` a Puzzle node or `Rewards`-ed by a Puzzle node.
            *   **Dagre Compound Nodes:** The `getDagreLayout` function in `layoutUtils.js` will be refactored to fully utilize Dagre's `compound: true` feature. This involves:
                *   Calling `g.setParent(childNode.id, parentNode.id)` for all nodes with an assigned `parentId`.
                *   Setting initial visual dimensions for all nodes (including parents) in `g.setNode()`. Dagre will then automatically calculate and expand the dimensions of parent (compound) nodes to encompass their children.
                *   Configuring Dagre's graph-level layout options to manage spacing *within* and *between* groups (e.g., `nodePadding`, `rankPadding`, `edgePadding` as supported by Dagre).
            *   **React Flow Parent Rendering:** The `useGraphTransform.js` hook will map `node.data.parentId` to React Flow's native `node.parentNode` attribute. This enables React Flow to render nodes hierarchically, with child nodes visually positioned *inside* their designated parent node.
        *   **Node Presentation (`EntityNode.jsx`):**
            *   Parent/Group Nodes: Nodes acting as parents (containers, puzzles with grouped elements) will be styled distinctly by `EntityNode.jsx` (e.g., using a subtle background variation, border, or by defining a specific parent node type in React Flow if more complex styling is needed) to visually set them apart as grouping constructs.
            *   Child Nodes: Will render as standard `EntityNode`s within the bounds of their parent.
            *   Dynamic Label Display: To combat truncation, node labels will display more detail upon zooming in or for central/selected nodes. Short, clear identifiers or icons may be used at lower zoom levels. Full information will always be available via tooltips (as per existing functionality).
        *   **Edge Presentation (`CustomEdge.jsx`):**
            *   Edges will continue to use `CustomEdge.jsx`.
            *   Consideration will be given to subtly varying edge styles (e.g., weight, opacity) for edges *within* a group versus edges *between* groups or top-level nodes, to reinforce visual hierarchy.
        *   **Simplification of State and UI:**
            *   `RelationshipMapper.jsx`, `useLayoutManager.js`, and `useRelationshipMapperUIState.js` will be simplified by removing states and UI elements related to the now-deprecated Radial and Force-Directed layout options.
            *   The manual "orbiting children" logic and associated custom hull rendering (`ClusterHull.jsx`) will be removed from `layoutUtils.js` and `RelationshipMapper.jsx` respectively, in favor of Dagre/React Flow's native compound node rendering.

    *   **C. Detailed Implementation Tasks:**
        *   **1. PRD Alignment (This Document):** Finalize updates to this `StoryForge PR.txt` (Sections 6.D, 9, and others as needed) to reflect this focused rebuild strategy. This document will serve as the "gold standard" for this effort. (Status: In Progress - This detailed drafting is part of that).
        *   **2. Data Transformation Refinement (`useGraphTransform.js`):**
            *   Verify and solidify the `data.parentId` assignment logic. Ensure it correctly identifies all semantically intended children for 'Element' (type: Container) and 'Puzzle' hubs based on `edge.data.shortLabel` values like "Contains," "Required For," and "Rewards."
            *   Uncomment and ensure correct operation of the code that maps `node.data.parentId` to `node.parentNode`, ensuring the parent node is part of the `finalNodesForLayout` passed to the layout function.
        *   **3. Layout Engine Overhaul (`layoutUtils.js` - `getDagreLayout`):**
            *   Remove the `getCustomRadialLayout` and `getForceDirectedLayout` functions.
            *   In `getDagreLayout`:
                *   Remove all previous "inflated hub size" calculations and the manual "Post-process: orbit children" logic.
                *   When calling `g.setNode()`, use the node's standard visual dimensions (e.g., `config.nodeWidth`).
                *   Implement the iteration to call `g.setParent(childNode.id, parentNode.id)` for all nodes with a valid `data.parentId`.
                *   Research and apply appropriate Dagre graph-level options for padding and spacing within compound nodes (e.g., `rankPadding`, `nodePadding`, `marginx`, `marginy` might need to be applied to the subgraph/cluster rather than or in addition to the global graph).
        *   **4. Node Rendering Enhancements (`EntityNode.jsx`):**
            *   Implement dynamic label rendering based on zoom level (using `useViewport()` from `@xyflow/react`). Define thresholds for icon-only, short label, and fuller label displays.
            *   Develop and apply distinct styling for nodes that function as group parents (e.g., using `node.isParent` if provided by React Flow, or by adding a `data.isActualParentGroup` flag from `useGraphTransform`). This could involve different background shades, borders, or slight padding *within the Paper component* if it doesn't interfere with Dagre's child placement.
        *   **5. Main Mapper Component Simplification (`RelationshipMapper.jsx`):**
            *   Remove UI elements (buttons, selectors) and associated state logic (in `useLayoutManager.js`, `useRelationshipMapperUIState.js`) for the Radial and Force-Directed layouts.
            *   If a default Dagre orientation (e.g., 'TB') is chosen as standard, remove UI for changing Dagre orientation, further simplifying the controls panel.
            *   Ensure map controls (zoom, fit-view, fullscreen toggle, info/help) are consistently available and functional, especially when the map is in fullscreen mode. The existing panel can be simplified and should remain accessible.
            *   Remove the `ClusterHull.jsx` component and its rendering logic if native parent node styling is sufficient.
        *   **6. Edge Styling (Optional Refinement - `CustomEdge.jsx`):**
            *   After core grouping is stable, evaluate if distinct styling for intra-group vs. inter-group edges (e.g., thinner, slightly transparent for intra-group) enhances clarity. Implement in `CustomEdge.jsx` if deemed beneficial.
        *   **7. Filtering Logic Review (`filterGraph.js`):**
            *   Temporarily simplify or disable the "Single Point of Connection" (SPOC) edge pruning logic during initial layout rebuild to avoid confounding factors.
            *   Once the new compound node layout is stable and clear, re-evaluate the SPOC logic. Test its impact on readability with the new grouping. It might be simplified or its parameters tuned. Basic depth and node/edge type filtering should remain functional.
        *   **8. Comprehensive Testing:**
            *   Utilize diverse test cases based on PRD Section 6.B (User Personas & Use Cases), focusing on Character, Element (container), and Puzzle maps.
            *   Verify that logical groups (container contents, puzzle I/O) are visually cohesive and easy to interpret.
            *   Assess overall graph readability, edge crossings, and spacing.
            *   Test label display at various zoom levels.
            *   Confirm UI consistency and control accessibility.

    *   **D. Key UI/UX Improvements Addressed by this Rebuild:**
        *   **Hierarchical Clarity:** Direct visual representation of parent-child relationships (items in containers, elements tied to puzzles).
        *   **Reduced Cognitive Load:** Simplified visual structure and fewer user-configurable layout options will make the map easier to understand and use.
        *   **Improved "At-a-Glance" Understanding:** Users should be able to quickly discern the main relationships and groupings relevant to the central entity.
        *   **Enhanced Label Readability:** Dynamic labels will reduce clutter while ensuring information is accessible.
        *   **Consistent UI Controls:** Improved accessibility and behavior of map controls.

    *   **E. Expected Outcome / Definition of Done for this Step:**
        *   The Relationship Mapper primarily uses a Dagre-based layout that effectively renders logical groups (containers, puzzles) as visually distinct compound nodes using React Flow's `parentNode` mechanism.
        *   Alternative layout options (Radial, Force-Directed) and manual orbiting/hull logic are removed from the codebase.
        *   Node labels are dynamically adjusted for readability based on context (e.g., zoom).
        *   The UI for map controls is simplified and functions correctly in all view modes.
        *   The mapper demonstrably meets the core visualization needs for Character, Element (container), and Puzzle map use cases as outlined in PRD Section 6.B.
        *   The relevant codebase (`RelationshipMapper/` directory) is cleaner, more maintainable, and focused.
        *   This PRD section (and related ones like 6.D) are updated to accurately reflect the new implementation.
    *   **Status: PENDING (This detailed plan supersedes the previous brief for this step)**

3.  **Full PRD Update & Documentation Synchronization (Completion of Initial Pass):**
    *   *Why:* Solidify `StoryForge PR.txt` (this document) as the single, accurate source of truth. Align or archive other potentially conflicting project documents.
    *   *Where:* This document (`StoryForge PR.txt`), and any auxiliary project documents. Key auxiliary documents to review/archive include `StoryForge Phase 2 Glowup*.txt` and `frontend-glowup-bundle.txt`, if their content is still relevant and not superseded by this PRD.
    *   *Tasks:*
        *   Systematically update all sections in this document based on findings and work completed in Phase 1 (tech debt, mapper UX refinements, current codebase state). (This current update to v3.2 is a major part of this task).
        *   Update mapper architecture descriptions, layout strategies, testing strategy sections (Section 10), dependency lists, and milestone statuses (especially re-evaluating original "Milestone 10" regarding memory parsing).
        *   Merge any still-relevant, unique content from auxiliary documents into this PRD. Clearly mark these auxiliary documents as "ARCHIVED" or "SUPERSEDED by StoryForge PR.txt v3.2 (or current version)" to avoid future confusion. (This sub-task may require manual effort if documents are not in the repo or easily parsable).
    *   *What (Goal):* A comprehensively updated and accurate `StoryForge PR.txt`. Clear status established for all other project documentation.
    *   **Status: PARTIALLY COMPLETED** (This update to v3.2 is a significant step. Systematic review/merge/archive of auxiliary documents remains, potentially requiring manual intervention).

**Phase 2: Advanced Mapper Enhancements & Minimal Memory Attribute Implementation**
*(All items in this phase are PENDING)*

4.  **RelationshipMapper - Advanced UX Enhancements:**
    *   *Why:* Build on the stable foundation from Phase 1 to make the mapper more informative and interactive.
    *   *Where:* `storyforge/frontend/src/components/RelationshipMapper/` components (e.g., `EntityNode.jsx` for tooltips/chips, `CustomEdge.jsx` for edge labels), UI state hooks (e.g., `useRelationshipMapperUIState.js`), filtering logic (`filterGraph.js`).
    *   *Tasks:* Implement/refine information-rich tooltips, node chips, edge labels (using `graphData` fields like `contextualLabel`, `shortLabel`, enriched node properties). Implement/refine advanced filtering UI & logic. Address UI/UX polish items.
    *   *What (Goal):* A significantly more interactive and informative Relationship Mapper. Relevant PRD sections updated.
    *   **Status: PENDING**

5.  **Define & Implement MINIMAL Memory Attribute Handling (Re-prioritized):**
    *   *Why:* Address the previously identified feature gap for essential memory identification (e.g., RFID) in a simplified, deferred manner.
    *   *Tasks:*
        *   **Define Simplest Template:** The defined minimal template is `SF_RFID: [value]` as documented in PRD Section 4.D.
        *   **Backend Parsing (`storyforge/backend/src/utils/notionPropertyMapper.js`):** Implement logic in `mapElementWithNames` to parse only this minimal `SF_RFID` attribute from the `Description/Text` field. Ensure the full original description text remains accessible.
        *   **Backend Tests (`storyforge/backend/tests/utils/notionPropertyMapper.test.js`):** Add unit tests for this minimal parsing logic.
        *   **Frontend Display (`storyforge/frontend/src/pages/ElementDetail.jsx`):** Update the "Memory Data" section to clearly display this newly parsed attribute from the element data object. Remove any placeholder/TODO comment related to old memory parsing ideas.
        *   **Frontend Tests:** Add tests for the display of this attribute in `ElementDetail.jsx`.
        *   **PRD Update:** Ensure original "Milestone 10" concepts regarding memory parsing are fully superseded by this Action Plan. (Largely addressed by this Action Plan replacing old milestones).
    *   *What (Goal):* Basic RFID parsing from Element descriptions and display in the UI. PRD Section 4.D updated to match actual implementation.
    *   **Status: PENDING**

**Phase 3: Editing Capabilities, Further Refinements & Advanced Features**
*(All items in this phase are PENDING)*

6.  **Prepare for and Implement Editing Capabilities:**
    *   *Why:* Enable users to modify Notion data directly through StoryForge, a core long-term goal.
    *   *Where:* This will involve significant new backend work (new API endpoints in `notionController.js`, write logic in `notionService.js`, potentially new mappers in `notionPropertyMapper.js` for constructing Notion API payloads) and frontend work (editing forms, UI components, state management for optimistic updates, error handling for writes).
    *   *Tasks:* Design and document editing workflows, data validation schema (client and server-side). Implement CRUD operations for entities and relationships. Address data synchronization and potential conflict resolution strategies.
    *   *What (Goal):* Core editing features implemented. Relevant PRD sections created/updated.
    *   **Status: PENDING**

7.  **Integrate Accessibility Focus into Ongoing Workflow:**
    *   *Why:* Ensure StoryForge is usable by people with diverse abilities, a non-functional requirement.
    *   *Where:* All frontend components, especially interactive ones like the Relationship Mapper and any new editing interfaces.
    *   *Tasks:* For new components and major refactors, include accessibility checks (keyboard navigation, ARIA attributes, color contrast) in development and testing. Review key UI components against WCAG guidelines.
    *   *What (Goal):* Improved accessibility of the application.
    *   **Status: PENDING**

8.  **Continue with Further Enhancements / Next Development Cycle:**
    *   *Why:* Ongoing project development based on evolving needs and priorities.
    *   *Where:* As per new feature requirements (e.g., enhancing the Dashboard based on Section 6.C, revisiting more advanced memory attribute handling if needed, Playtesting Support features).
    *   *What (Goal):* New features delivered based on this updated and reliable PRD.
    *   **Status: PENDING**

**10. Testing Strategy**

**Testing Suite Status (as of May 19, 2025):**
*   Deprecated test files (`storyforge/backend/tests/utils/propertyMapper.test.js`, `storyforge/backend/tests/utils/notionPropertyMapperAsync.test.js`, `storyforge/backend/tests/integration/puzzleEndpoints.test.js`) have been removed from the codebase.
*   The primary utility mapper test file is now `storyforge/backend/tests/utils/notionPropertyMapper.test.js`. This file requires ongoing review and expansion to cover all critical mapping logic, including the upcoming minimal memory attribute parsing (Phase 2, Step 5).
*   The frontend test file `storyforge/frontend/src/components/RelationshipMapper/RelationshipMapper.test.jsx` (and any related specific layout/transform tests) will require significant refactoring or replacement to align with the focused rebuild of the Relationship Mapper. Tests should now focus on:
    *   Correct `graphData` consumption.
    *   Proper `parentId` assignment logic in `useGraphTransform.js`.
    *   Successful rendering of hierarchical structures using Dagre compound nodes and React Flow's `parentNode` mechanism.
    *   User interactions with the simplified control panel and new features like dynamic label display.
*   E2E tests (e.g., using Playwright) remain crucial and will be adapted to cover key user workflows with the rebuilt mapper.

A comprehensive testing strategy is crucial for the development of StoryForge. This includes:

*   **10.1. Unit Tests:**
    *   **Backend:** (Remains as previously stated)
    *   **Frontend:**
        *   Core UI components: `EntityNode.jsx` (including dynamic label rendering logic and parent/group styling), `CustomEdge.jsx`.
        *   Utility functions:
            *   `transformToGraphElements.js`: Confirm correct mapping from `graphData` to React Flow elements, especially `edge.data.shortLabel` usage.
            *   `useGraphTransform.js`: Critical unit tests for the `parentId` assignment logic given various `graphData` inputs. Test the correct formation of `nodes` and `edges` including the `parentNode` attribute.
            *   `layoutUtils.js` (`getDagreLayout`): Test the core Dagre graph setup, particularly `g.setParent()` calls and application of graph-level layout options for compound nodes (may require mocking Dagre's behavior or testing smaller, verifiable graph structures).
            *   `filterGraph.js`: Test filtering logic (depth, type, and SPOC if re-enabled) independently of layout.
*   **10.2. Integration Tests:**
    *   **Backend:** (Remains as previously stated)
    *   **Frontend:**
        *   Test the flow from `graphData` prop in `RelationshipMapper.jsx` through `useGraphTransform.js` to `getDagreLayout`, and finally to the nodes/edges rendered by React Flow. Verify that parent-child relationships are correctly established and rendered.
        *   Test interactions between the simplified control panel in `RelationshipMapper.jsx` and the resulting graph display (e.g., depth changes, filter applications).
*   **10.3. End-to-End (E2E) Tests:**
    *   Simulate real user scenarios using a testing framework like Playwright:
        *   Fetching and displaying a Character map (e.g., "Alex Reeves's Map"): Verify key owned items (like containers with their contents) and associated puzzles (with their inputs/outputs) are clearly grouped and visually distinct.
        *   Displaying an Element map for a container: Verify its contents are shown hierarchically within it.
        *   Displaying a Puzzle map: Verify its required and rewarded elements are grouped with it.
        *   Test dynamic label display at different zoom levels.
        *   Test tooltip information accuracy for nodes and edges.
        *   Verify UI consistency of controls in standard and fullscreen modes.
    *   These E2E tests are essential for validating the overall UX and "storytelling" effectiveness of the rebuilt mapper.
*   **10.4. Manual & Exploratory Testing:**
    *   (Remains as previously stated, but with a focus on the new hierarchical layout across various data complexities).

This testing strategy, with tests being added and updated alongside the focused rebuild as per the Action Plan (Section 9), will serve as a blueprint for building a resilient and reliable StoryForge application.

---
