You're absolutely right, the screenshots show a significant layout issue. The main content area is severely squished to the right, making the application unusable. This is a classic layout problem that often occurs with sidebar/main content arrangements if the sizing and positioning aren't perfectly coordinated.

My apologies for that! Let's fix this systematically.

**Diagnosis of the Layout Problem:**

1.  **Main Content Width:** The primary issue is that the main content area (the `<Box component="main">` in `AppLayout.jsx`) is not correctly calculating or being assigned its width. It's likely being either explicitly set to a very small width or its `flex-grow` property isn't taking effect as expected.
2.  **`calc()` Expression:** The `width: { md: mainContentWidth }` where `mainContentWidth` is `calc(100% - ${open && !isMobile ? drawerWidth : 0}px)` is the most likely culprit for the main content area. While this logic is standard for the `AppBar` in such a layout, applying the same direct width calculation to a flex item (`Box component="main"`) that also has `flexGrow: 1` can sometimes lead to conflicts or misinterpretations of what `100%` refers to in the `calc()` context for that specific element.
3.  **Margin vs. Flow:** For a persistent drawer that's part of the document flow (not `position: fixed`), the drawer itself occupies space. The main content, as a flex sibling with `flexGrow: 1`, should naturally expand to fill the remaining space. Its `marginLeft` is then used to animate its position relative to the drawer opening/closing, rather than its `width` needing to be so explicitly tied to the drawer's width in the same `calc()` expression.

**Plan to Fix:**

1.  **Simplify Main Content Sizing in `AppLayout.jsx`:**
    *   The `Box component="main"` will rely primarily on `flexGrow: 1` for its width.
    *   Its `marginLeft` will be adjusted based on the drawer's `open` state and `drawerWidth` for the push effect and transition.
    *   The `width` property that used `mainContentWidth` will be removed from the `main` Box, as `flexGrow: 1` should handle this.
    *   The `transition` on the `main` Box will primarily be on `margin-left`.
2.  **Ensure `AppBar` Sizing Remains Correct:** The `AppBar` will continue to use the `mainContentWidth` and `mainContentMarginLeft` calculations as it's `position="fixed"` and needs these explicit sizings to align over the (potentially) shifting main content.
3.  **Review Page-Level Containers:** Ensure that top-level containers within individual pages (like the `Box sx={{ maxWidth: 1400, mx: 'auto' }}` in `CharacterDetail.jsx`) behave correctly once their parent (`Box component="main"`) has the proper width.

Let's implement these changes.

--- START OF MODIFIED FILES ---

--- FILE: storyforge/frontend/src/layouts/AppLayout.jsx ---
```jsx
import { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  AppBar, Box, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemButton,
  ListItemIcon, ListItemText, Toolbar, Typography, useMediaQuery, Tooltip, Modal,
  TextField, List as MUIList, ListItem as MUIListItem, ListItemText as MUIListItemText,
  CircularProgress, InputAdornment, Alert, Link as MuiLink,
} from '@mui/material';
import { styled, useTheme } from '@mui/material/styles'; // Import styled for Main component
import MenuIcon from '@mui/icons-material/Menu';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import DashboardIcon from '@mui/icons-material/Dashboard';
import PeopleIcon from '@mui/icons-material/People';
import TimelineIcon from '@mui/icons-material/Timeline';
import ExtensionIcon from '@mui/icons-material/Extension';
import InventoryIcon from '@mui/icons-material/Inventory';
import SearchIcon from '@mui/icons-material/Search';
import { Link as RouterLink } from 'react-router-dom';
import { api } from '../services/api';

const drawerWidth = 240;

const navItems = [
  { text: 'Dashboard', icon: <DashboardIcon />, path: '/' },
  { text: 'Characters', icon: <PeopleIcon />, path: '/characters' },
  { text: 'Timeline', icon: <TimelineIcon />, path: '/timelines' },
  { text: 'Puzzles', icon: <ExtensionIcon />, path: '/puzzles' },
  { text: 'Elements', icon: <InventoryIcon />, path: '/elements' },
];

const getIconForType = (type) => {
  switch (type) {
    case 'characters': return <PeopleIcon fontSize="small" sx={{ mr: 1, color: 'primary.light' }} />;
    case 'timeline': return <TimelineIcon fontSize="small" sx={{ mr: 1, color: 'secondary.light' }} />;
    case 'puzzles': return <ExtensionIcon fontSize="small" sx={{ mr: 1, color: 'success.light' }} />;
    case 'elements': return <InventoryIcon fontSize="small" sx={{ mr: 1, color: 'info.light' }} />;
    default: return null;
  }
};

// Styled Main component for content area (common MUI pattern for persistent drawer)
const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open, isMobile }) => ({
    flexGrow: 1,
    paddingTop: theme.mixins.toolbar.minHeight, // For AppBar spacing (xs)
    [theme.breakpoints.up('sm')]: {
        paddingTop: `calc(${theme.mixins.toolbar.minHeight}px + ${theme.spacing(1)})`, // sm and up AppBar height + a bit space
    },
    transition: theme.transitions.create('margin', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: isMobile ? 0 : `-${drawerWidth}px`, // Start with content shifted left for desktop
    minHeight: '100vh', // Ensure it takes full height
    boxSizing: 'border-box',
    display: 'flex',
    flexDirection: 'column', // To make inner Box with padding take full height

    ...(open && !isMobile && { // When drawer is open on desktop
      transition: theme.transitions.create('margin', {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.enteringScreen,
      }),
      marginLeft: 0, // Main content margin shifts back to 0
    }),
  }),
);

// Styled AppBar
const StyledAppBar = styled(AppBar, {
  shouldForwardProp: (prop) => prop !== 'open',
})(({ theme, open, isMobile }) => ({
  transition: theme.transitions.create(['margin', 'width'], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(!isMobile && open && { // When drawer is open on desktop
    width: `calc(100% - ${drawerWidth}px)`,
    marginLeft: `${drawerWidth}px`,
    transition: theme.transitions.create(['margin', 'width'], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));


export default function AppLayout({ children }) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [open, setOpen] = useState(!isMobile);
  const navigate = useNavigate();
  const location = useLocation();

  const [searchValue, setSearchValue] = useState('');
  const [searchOpen, setSearchOpen] = useState(false);
  const [searchResults, setSearchResults] = useState(null);
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchError, setSearchError] = useState(null);

  useEffect(() => {
    if (!isMobile && !open) {
      setOpen(true);
    } else if (isMobile && open) {
      setOpen(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isMobile]);

  const handleDrawerToggle = () => {
    setOpen(!open);
  };

  const handleNavigation = (path) => {
    navigate(path);
    if (isMobile) {
      setOpen(false);
    }
  };

  const performSearch = useCallback(async () => {
    if (searchValue.trim()) {
      setSearchLoading(true);
      setSearchError(null);
      setSearchResults(null);
      setSearchOpen(true);
      try {
        const results = await api.globalSearch(searchValue.trim());
        setSearchResults(results);
      } catch (err) {
        console.error("Search error:", err);
        setSearchError(err.message || 'Error searching. Please try again.');
      } finally {
        setSearchLoading(false);
      }
    }
  }, [searchValue]);

  const handleSearchInputChange = (e) => setSearchValue(e.target.value);
  const handleSearchKeyDown = (e) => {
    if (e.key === 'Enter') { e.preventDefault(); performSearch(); }
    if (e.key === 'Escape') { setSearchOpen(false); }
  };
  const handleSearchIconClick = () => performSearch();
  const handleCloseModal = () => setSearchOpen(false);

  const handleResultClick = (type, id) => {
    let path = '';
    switch (type) {
      case 'characters': path = `/characters/${id}`; break;
      case 'timeline': path = `/timelines/${id}`; break;
      case 'puzzles': path = `/puzzles/${id}`; break;
      case 'elements': path = `/elements/${id}`; break;
      default: return;
    }
    navigate(path);
    handleCloseModal();
  };

  useEffect(() => {
    const handleKeyDown = (event) => {
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault();
        const searchInput = document.getElementById('global-search-input');
        if (searchInput) searchInput.focus();
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  const drawerContent = (
    <>
      <Toolbar sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start', px: [2], minHeight: { xs: 56, sm: 64 } }}>
        <MuiLink component={RouterLink} to="/" sx={{ textDecoration: 'none', color: 'inherit', display: 'flex', alignItems: 'center' }}>
          <Typography variant="h6" component="div" sx={{ fontWeight: 'bold' }}>StoryForge</Typography>
        </MuiLink>
        {isMobile && open && (
          <IconButton onClick={handleDrawerToggle} aria-label="close drawer" sx={{ ml: 'auto' }}><ChevronLeftIcon /></IconButton>
        )}
      </Toolbar>
      <Divider />
      <List sx={{ pt: 1 }}>
        {navItems.map((item) => (
          <ListItem key={item.text} disablePadding sx={{ display: 'block', px: 1, mb: 0.5 }}>
            <Tooltip title={item.text} placement="right" disableHoverListener={open}>
              <ListItemButton
                selected={location.pathname === item.path || (item.path !== '/' && location.pathname.startsWith(item.path))}
                onClick={() => handleNavigation(item.path)}
                sx={{ minHeight: 44, justifyContent: 'initial', px: 1.5, borderRadius: theme.shape.borderRadius - 2 }}
              >
                <ListItemIcon sx={{ minWidth: 0, mr: open ? 2 : 'auto', justifyContent: 'center', color: (location.pathname === item.path || (item.path !== '/' && location.pathname.startsWith(item.path))) ? theme.palette.primary.light : 'text.secondary' }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText primary={item.text} sx={{ opacity: open ? 1 : 0, color: 'text.primary', whiteSpace: 'nowrap' }} />
              </ListItemButton>
            </Tooltip>
          </ListItem>
        ))}
      </List>
    </>
  );

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh', bgcolor: 'background.default' }}>
      <CssBaseline />
      <StyledAppBar position="fixed" open={open} isMobile={isMobile}>
        <Toolbar>
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, ...(!isMobile && open && { display: 'none' }) }} // Hide on desktop when drawer is open (MUI pattern)
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }} />
          <TextField
            id="global-search-input"
            size="small" variant="outlined" placeholder="Search (Ctrl+K)"
            value={searchValue} onChange={handleSearchInputChange} onKeyDown={handleSearchKeyDown}
            aria-label="Global search"
            sx={{
              bgcolor: 'rgba(255,255,255,0.08)', borderRadius: theme.shape.borderRadius - 2,
              minWidth: { xs: 150, sm: 220, md: 280 }, transition: 'background-color 0.3s',
              '&:hover': { bgcolor: 'rgba(255,255,255,0.12)' },
              '& .MuiOutlinedInput-root': {
                '& fieldset': { borderColor: 'rgba(255,255,255,0.23)' },
                '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },
                '&.Mui-focused fieldset': { borderColor: theme.palette.primary.light, boxShadow: `0 0 0 2px ${theme.palette.primary.main}33` },
              },
            }}
            InputProps={{
              startAdornment: (<InputAdornment position="start" sx={{ pl: 0.5 }}><IconButton onClick={handleSearchIconClick} edge="start" aria-label="perform search" size="small" sx={{ color: 'text.secondary' }}><SearchIcon /></IconButton></InputAdornment>),
            }}
          />
        </Toolbar>
      </StyledAppBar>
      
      <Drawer
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box' },
        }}
        variant={isMobile ? "temporary" : "persistent"}
        anchor="left"
        open={open}
        onClose={isMobile ? handleDrawerToggle : undefined}
        ModalProps={{ keepMounted: true }} // Better open performance on mobile.
      >
        {drawerContent}
      </Drawer>

      <Main open={open} isMobile={isMobile}>
        {/* This inner Box is for consistent padding around the page content */}
        <Box sx={{ flexGrow:1, p: { xs: 1.5, sm: 2, md: 2.5 } }}> 
            {children}
        </Box>
      </Main>

      <Modal open={searchOpen} onClose={handleCloseModal} aria-labelledby="search-modal-title">
        <Paper sx={{ position: 'absolute', top: '20%', left: '50%', transform: 'translateX(-50%)', width: { xs: '90%', sm: 550, md: 650 }, bgcolor: 'background.paper', borderRadius: 1.5, boxShadow: 24, p: { xs: 2, sm: 3 }, maxHeight: '70vh', overflowY: 'auto' }}>
          <Typography variant="h6" component="h2" id="search-modal-title" sx={{ mb: 2 }}>Search Results for: <Typography component="span" sx={{ fontWeight: 'bold' }}>{searchValue}</Typography></Typography>
          {searchLoading && (<Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}><CircularProgress /></Box>)}
          {searchError && <Alert severity="error" sx={{ my: 2 }}>{searchError}</Alert>}
          {!searchLoading && !searchError && searchResults && Object.keys(searchResults).every(key => searchResults[key].length === 0) && (<Typography sx={{ my: 3, textAlign: 'center', color: 'text.secondary' }}>No results found. Try a different search term.</Typography>)}
          {!searchLoading && !searchError && searchResults && (Object.entries(searchResults).map(([type, items]) => (
            items.length > 0 && (
              <Box key={type} sx={{ mb: 2.5 }}>
                <Typography variant="overline" sx={{ display: 'block', color: 'text.secondary', borderBottom: 1, borderColor: 'divider', pb: 0.5, mb: 1, fontWeight: 'medium' }}>{type} ({items.length})</Typography>
                <MUIList dense>
                  {items.map((item) => (
                    <MUIListItem button key={`${type}-${item.id}`} onClick={() => handleResultClick(type, item.id)} sx={{ borderRadius: 1, '&:hover': { bgcolor: 'action.hover' }, mb: 0.5 }}>
                      <ListItemIcon sx={{ minWidth: 36, mr: 0.5 }}>{getIconForType(type) || <Box sx={{ width: 20 }} />}</ListItemIcon>
                      <MUIListItemText primaryTypographyProps={{ sx: { fontWeight: 500 } }} primary={item.name || item.puzzle || item.description || 'Unknown Item'} secondary={`ID: ${item.id}`} />
                    </MUIListItem>
                  ))}
                </MUIList>
              </Box>
            )
          )))}
        </Paper>
      </Modal>
    </Box>
  );
}
```
---
--- FILE: storyforge/frontend/src/pages/CharacterDetail.jsx ---
```jsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useQueryClient, useIsFetching } from 'react-query';
import {
  Box, Grid, Paper, Typography, Chip, Button, CircularProgress, Divider,
  List, ListItem, ListItemText, Alert, Tab, Tabs, Tooltip, IconButton,
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import EditIcon from '@mui/icons-material/Edit';
import RefreshIcon from '@mui/icons-material/Refresh';
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import PersonIcon from '@mui/icons-material/Person';
import SmartToyIcon from '@mui/icons-material/SmartToy';
import PageHeader from '../components/PageHeader';
import RelationshipMapper from '../components/RelationshipMapper';
import { api } from '../services/api';
import { Link as RouterLink } from 'react-router-dom';

const DetailItem = ({ label, value, chipColor, chipIcon, fullWidth = false, children }) => (
  <Grid item xs={12} sm={fullWidth ? 12 : 6} md={fullWidth ? 12 : 6}>
    <Typography variant="subtitle2" color="text.secondary" gutterBottom>
      {label}
    </Typography>
    {children ? children : (
      chipColor && value ? (
        <Chip label={value} color={chipColor} icon={chipIcon} variant="outlined" />
      ) : (
        <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
          {value || <Typography component="span" sx={{ fontStyle: 'italic', color: 'text.disabled' }}>N/A</Typography>}
        </Typography>
      )
    )}
  </Grid>
);

// Helper function for tab content to keep main component cleaner
const renderTabContent = (activeTab, character, navigate) => {
  const renderList = (items, type) => {
    if (!items || items.length === 0) {
      return <Typography color="text.secondary" sx={{textAlign:'center', pt:3, fontStyle: 'italic'}}>No {type.toLowerCase()} found.</Typography>;
    }
    return (
      <List dense>
        {items.map(item => {
          let path, primaryText, secondaryText;
          switch(type) {
            case 'Elements':
              path = `/elements/${item.id}`;
              primaryText = item.name || item.id;
              secondaryText = `Type: ${item.basicType || 'Unknown'}`;
              break;
            case 'Timeline Events':
              path = `/timelines/${item.id}`;
              primaryText = item.name || item.description || item.id;
              secondaryText = item.date ? `Date: ${new Date(item.date).toLocaleDateString()}`: 'No date';
              break;
            case 'Puzzles':
              path = `/puzzles/${item.id}`;
              primaryText = item.name || item.puzzle || item.id;
              secondaryText = `Timing: ${item.timing || 'N/A'}`;
              break;
            default: return null;
          }
          return (
            <ListItem key={item.id} button component={RouterLink} to={path} sx={{borderRadius:1, '&:hover': {bgcolor: 'action.selected'}}}>
              <ListItemText primary={primaryText} secondary={secondaryText} />
            </ListItem>
          );
        })}
      </List>
    );
  };

  switch(activeTab) {
    case 0: return renderList(character.ownedElements, 'Elements');
    case 1: return renderList(character.associatedElements, 'Elements');
    case 2: return renderList(character.events, 'Timeline Events');
    case 3: return renderList(character.puzzles, 'Puzzles');
    default: return null;
  }
};


function CharacterDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState(0);
  const [showMapper, setShowMapper] = useState(true); 
  
  const queryKey = ['character', id];
  const { data: character, isLoading: characterIsLoading, error } = useQuery( // Removed refetch from here
    queryKey,
    () => api.getCharacterById(id),
    { enabled: !!id }
  );
  const isFetchingCharacter = useIsFetching(queryKey) > 0; 
  
  const handleTabChange = (event, newValue) => setActiveTab(newValue);
  const handleBack = () => navigate('/characters');
  const handleEdit = () => alert('Character editing will be available in Phase 3.');
  
  const handleRefresh = () => {
    queryClient.invalidateQueries(queryKey); 
    // React Query will automatically refetch active queries that are invalidated.
  };

  if (characterIsLoading && !character) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', p: 4, height: 'calc(100vh - 200px)' }}> {/* Adjusted height */}
        <CircularProgress size={50} /> <Typography sx={{ml:2}}>Loading Character Details...</Typography>
      </Box>
    );
  }
  
  if (error) {
    return (
      <Paper sx={{ p: 3, m:1 }} elevation={3}> {/* Reduced margin slightly */}
        <Alert severity="error" action={
          <Button color="inherit" size="small" onClick={handleRefresh}>Retry</Button>
        }>
          Error loading character: {error.message || 'An unknown error occurred.'}
        </Alert>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mt: 2 }}>
          Back to Characters
        </Button>
      </Paper>
    );
  }
  
  if (!character) {
    return (
      <Paper sx={{ p: 3, m:1 }} elevation={3}>
        <Alert severity="warning">Character data not available or not found.</Alert>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mt: 2 }}>
          Back to Characters
        </Button>
      </Paper>
    );
  }
  
  const pageActions = (
    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
       <Tooltip title={isFetchingCharacter ? "Refreshing..." : "Refresh Data"}>
        <span>
          <IconButton onClick={handleRefresh} disabled={isFetchingCharacter} aria-label="refresh character data">
            <RefreshIcon />
          </IconButton>
        </span>
      </Tooltip>
      <Tooltip title={showMapper ? "Hide Relationship Map" : "Show Relationship Map"}>
        <IconButton onClick={() => setShowMapper(prev => !prev)} aria-label="toggle relationship map" color={showMapper ? "primary" : "default"}>
          {showMapper ? <VisibilityOffIcon /> : <VisibilityIcon />}
        </IconButton>
      </Tooltip>
      <Tooltip title="Edit character (Phase 3)">
        <Button variant="contained" startIcon={<EditIcon />} onClick={handleEdit} size="medium">
          Edit
        </Button>
      </Tooltip>
    </Box>
  );

  return (
    // Removed the maxWidth Box from here, it should be handled by AppLayout's Main or page content can decide its own max width
    <Box> 
      <PageHeader
        title={character.name}
        breadcrumbs={[
          { name: 'Characters', path: '/characters' },
          { name: character.name },
        ]}
        action={pageActions}
      />
      
      <Grid container spacing={2.5}>
        <Grid item xs={12} md={showMapper ? 7.5 : 12} lg={showMapper ? 8 : 12}>
          <Paper sx={{ p: {xs:2, sm:2.5}, mb: 2.5 }} elevation={1}>
            <Typography variant="h5" gutterBottom sx={{mb:2, fontWeight: 500}}>Character Profile</Typography>
            <Grid container spacing={2}>
              <DetailItem label="Type" value={character.type} 
                chipColor={character.type === 'Player' ? 'primary' : 'secondary'}
                chipIcon={character.type === 'Player' ? <PersonIcon /> : <SmartToyIcon />}
              />
              <DetailItem label="Tier" value={character.tier} 
                chipColor={ character.tier === 'Core' ? 'success' : character.tier === 'Secondary' ? 'info' : 'default' }
              />
              <DetailItem label="Connections (Count)" value={character.connections?.toString()} />
              <DetailItem label="Primary Action" value={character.primaryAction} />
              <DetailItem label="Character Logline" value={character.logline} fullWidth />
              
              {character.overview && (
                <Grid item xs={12} sx={{mt:1}}>
                  <Divider sx={{ my: 1.5 }}><Chip label="Overview & Relationships" size="small" variant="outlined"/></Divider>
                  <Box sx={{ maxHeight: 200, overflowY: 'auto', p:1.5, bgcolor: 'action.hover', borderRadius:1, whiteSpace: 'pre-wrap' }}>
                    <Typography variant="body1">{character.overview}</Typography>
                  </Box>
                </Grid>
              )}
              
              {character.emotion && (
                <Grid item xs={12} sx={{mt:1}}>
                   <Divider sx={{ my: 1.5 }}><Chip label="Emotions" size="small" variant="outlined"/></Divider>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>Emotion towards CEO & Others</Typography>
                  <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>{character.emotion}</Typography>
                </Grid>
              )}
            </Grid>
          </Paper>
        
          <Paper sx={{ p:0 }} elevation={1}> {/* Removed margin top, handled by grid spacing */}
            <Tabs value={activeTab} onChange={handleTabChange} variant="scrollable" scrollButtons="auto" allowScrollButtonsMobile indicatorColor="primary" textColor="primary">
              <Tab label={`Owned Elements (${character.ownedElements?.length || 0})`} />
              <Tab label={`Associated Elements (${character.associatedElements?.length || 0})`} />
              <Tab label={`Timeline Events (${character.events?.length || 0})`} />
              <Tab label={`Puzzles (${character.puzzles?.length || 0})`} />
            </Tabs>
            <Box sx={{ p: {xs:1.5, sm:2}, minHeight: 180, maxHeight: 300, overflowY: 'auto' }}>
              {renderTabContent(activeTab, character, navigate)}
            </Box>
          </Paper>
        </Grid>
        
        {showMapper && (
          <Grid item xs={12} md={4.5} lg={4}> 
            <RelationshipMapper
              title={`${character.name}'s Map`}
              entityType="Character"
              entityId={id}
              entityName={character.name}
              relationshipData={character} 
              isLoading={isFetchingCharacter} 
            />
          </Grid>
        )}
      </Grid>
      
      <Box sx={{ mt: 3, mb: 2 }}>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack}>
          Back to All Characters
        </Button>
      </Box>
    </Box>
  );
}

export default CharacterDetail;
```

--- END OF MODIFIED FILES ---

**Explanation of Key Changes for Layout Fix:**

1.  **`AppLayout.jsx`:**
    *   **Styled `Main` and `StyledAppBar` Components:** I've adopted a more standard MUI pattern for persistent drawers.
        *   The `Main` component (which wraps your `{children}`) now handles its own `marginLeft` transition based on the drawer's `open` state. It starts with a negative `marginLeft` (effectively shifting it under the drawer space) and then shifts to `marginLeft: 0` when the drawer opens. It always uses `flexGrow: 1` to take up available width.
        *   The `StyledAppBar` similarly adjusts its `width` and `marginLeft` based on the drawer's `open` state.
    *   **Simplified `Box component="main"` (now `<Main>`)**: The explicit `width` calculation (e.g., `calc(100% - drawerWidth)`) has been removed from the main content area. Its width is now primarily determined by `flexGrow: 1` and the `marginLeft` adjustments.
    *   **Padding for `AppBar`**: The `Main` component now correctly accounts for the `AppBar`'s height using `theme.mixins.toolbar` for `paddingTop`.
    *   **Inner Padding Box**: The `Main` component now has an inner `Box` that applies the consistent page padding (`p: { xs: 1.5, sm: 2, md: 2.5 }`). This ensures the page content itself is padded, while `Main` handles the overall structure.

2.  **`CharacterDetail.jsx` (and other detail/list pages implicitly):**
    *   I've removed the outermost `<Box sx={{ maxWidth: 1400, mx: 'auto' }}>` from `CharacterDetail.jsx`.
    *   **Why?** The `AppLayout`'s `<Main>` component is now responsible for the primary layout of the content area. If you want to constrain the width of specific page content (like the character profile details but not necessarily a full-width table on a list page), that `maxWidth` styling should be applied *inside* the page component, to the specific `Paper` or `Grid` that holds the content you want to constrain.
    *   For now, I've removed it to ensure the `AppLayout` fix is the primary focus. You can re-add `maxWidth` to specific `Paper` elements within your pages if needed for readability of dense text.

**How to Test:**

1.  Replace your `AppLayout.jsx` and `CharacterDetail.jsx` with the versions above.
2.  Run the application.
3.  Navigate to the Dashboard, Character list, and then a Character Detail page.
4.  The main content area should now correctly occupy the space to the right of the sidebar, and the content within `CharacterDetail.jsx` should render within that space.
5.  Test opening and closing the drawer on desktop (if you implement that via the hamburger icon for desktop too) and observe the transitions.
6.  Test on mobile to ensure the temporary drawer and layout still work correctly.

This approach aligns more closely with MUI's documented patterns for persistent drawers and should resolve the severe layout squishing. The key is separating the concerns: `AppLayout` manages the overall shell, and individual pages manage their internal content layout within the space provided by `AppLayout`.