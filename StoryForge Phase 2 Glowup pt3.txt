Okay, I see the problem. The screenshots clearly show the layout fix for the main content area worked (Dashboard and Character List are rendering correctly full-width), but the Character Detail page (and presumably other detail pages) are completely blank. This is a strong indicator of a JavaScript runtime error occurring specifically on those detail pages.

My apologies for this oversight. Let's troubleshoot and fix this carefully.

**Primary Suspects for Blank Detail Pages:**

1.  **Error in Data Handling/Rendering:**
    *   The most likely cause is an error when trying to access properties of the fetched data (e.g., `character.name`) before the data is fully loaded and validated, or if the data structure is not what's expected.
    *   An error within a child component like `RelationshipMapper` or `DetailItem` when it receives `null`, `undefined`, or malformed props.
2.  **`RelationshipMapper` Data Processing:**
    *   The `transformDataToGraphElements` or `getLayoutedElements` functions in the `RelationshipMapper` could be encountering an unhandled edge case with the specific data for "Derek Thorn" or similar entities, causing a crash.
3.  **Conditional Rendering Logic:** An issue where the `isLoading`, `error`, or data-existence checks in the detail page might lead to a state where nothing is returned from the component's render function.

**Systematic Fix Approach:**

1.  **Robust Data Checking in Detail Pages:** We need to be absolutely sure that data (`character`, `element`, etc.) exists and is in a valid state before trying to render anything that depends on it.
2.  **Safer Prop Passing to `RelationshipMapper`:** Ensure the `RelationshipMapper` receives its `isLoading` prop based on the *specific query's loading state* for that detail page, not a global `isFetching` state.
3.  **Defensive Programming in Components:** Add more null checks and default fallbacks within components like `DetailItem` and ensure `RelationshipMapper` handles empty or partial data gracefully.
4.  **Simplify `AppLayout.jsx` `paddingTop` for `<Main>`:** Use fixed values based on AppBar height to avoid potential issues with `theme.mixins.toolbar` if it's not ready during initial style computation.

Here's the revised iteration:

--- START OF MODIFIED FILES ---

--- FILE: storyforge/frontend/src/layouts/AppLayout.jsx ---
```jsx
import { useState, useEffect, useCallback } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  AppBar, Box, CssBaseline, Divider, Drawer, IconButton, List, ListItem, ListItemButton,
  ListItemIcon, ListItemText, Toolbar, Typography, useMediaQuery, Tooltip, Modal,
  TextField, List as MUIList, ListItem as MUIListItem, ListItemText as MUIListItemText,
  CircularProgress, InputAdornment, Alert, Link as MuiLink,
} from '@mui/material';
import { styled, useTheme } from '@mui/material/styles';
import MenuIcon from '@mui/icons-material/Menu';
import ChevronLeftIcon from '@mui/icons-material/ChevronLeft';
import DashboardIcon from '@mui/icons-material/Dashboard';
import PeopleIcon from '@mui/icons-material/People';
import TimelineIcon from '@mui/icons-material/Timeline';
import ExtensionIcon from '@mui/icons-material/Extension';
import InventoryIcon from '@mui/icons-material/Inventory';
import SearchIcon from '@mui/icons-material/Search';
import { Link as RouterLink } from 'react-router-dom';
import { api } from '../services/api';

const drawerWidth = 240;

const navItems = [
  { text: 'Dashboard', icon: <DashboardIcon />, path: '/' },
  { text: 'Characters', icon: <PeopleIcon />, path: '/characters' },
  { text: 'Timeline', icon: <TimelineIcon />, path: '/timelines' },
  { text: 'Puzzles', icon: <ExtensionIcon />, path: '/puzzles' },
  { text: 'Elements', icon: <InventoryIcon />, path: '/elements' },
];

const getIconForType = (type) => {
  switch (type) {
    case 'characters': return <PeopleIcon fontSize="small" sx={{ mr: 1, color: 'primary.light' }} />;
    case 'timeline': return <TimelineIcon fontSize="small" sx={{ mr: 1, color: 'secondary.light' }} />;
    case 'puzzles': return <ExtensionIcon fontSize="small" sx={{ mr: 1, color: 'success.light' }} />;
    case 'elements': return <InventoryIcon fontSize="small" sx={{ mr: 1, color: 'info.light' }} />;
    default: return null;
  }
};

// AppBar height constants
const APP_BAR_MOBILE = 56;
const APP_BAR_DESKTOP = 64;

const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(
  ({ theme, open, isMobile }) => ({
    flexGrow: 1,
    // Padding top is now handled by a Toolbar spacer in the Main content
    transition: theme.transitions.create('margin', {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.leavingScreen,
    }),
    marginLeft: isMobile ? 0 : (open ? 0 : `-${drawerWidth}px`), // Adjust based on drawer state for desktop
    minHeight: '100vh',
    boxSizing: 'border-box',
    display: 'flex',
    flexDirection: 'column',

    ...(open && !isMobile && {
      transition: theme.transitions.create('margin', {
        easing: theme.transitions.easing.easeOut,
        duration: theme.transitions.duration.enteringScreen,
      }),
      // marginLeft: 0, // Already handled by the ternary above
    }),
  }),
);

const StyledAppBar = styled(AppBar, {
  shouldForwardProp: (prop) => prop !== 'open',
})(({ theme, open, isMobile }) => ({
  transition: theme.transitions.create(['margin', 'width'], {
    easing: theme.transitions.easing.sharp,
    duration: theme.transitions.duration.leavingScreen,
  }),
  ...(!isMobile && open && {
    width: `calc(100% - ${drawerWidth}px)`,
    marginLeft: `${drawerWidth}px`,
    transition: theme.transitions.create(['margin', 'width'], {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.enteringScreen,
    }),
  }),
}));


export default function AppLayout({ children }) {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [open, setOpen] = useState(!isMobile);
  const navigate = useNavigate();
  const location = useLocation();

  const [searchValue, setSearchValue] = useState('');
  const [searchOpen, setSearchOpen] = useState(false);
  const [searchResults, setSearchResults] = useState(null);
  const [searchLoading, setSearchLoading] = useState(false);
  const [searchError, setSearchError] = useState(null);

  useEffect(() => {
    if (!isMobile && !open) {
      setOpen(true);
    } else if (isMobile && open) {
      setOpen(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isMobile]);

  const handleDrawerToggle = () => {
    setOpen(!open);
  };

  const handleNavigation = (path) => {
    navigate(path);
    if (isMobile) {
      setOpen(false);
    }
  };

  const performSearch = useCallback(async () => {
    if (searchValue.trim()) {
      setSearchLoading(true);
      setSearchError(null);
      setSearchResults(null);
      setSearchOpen(true);
      try {
        const results = await api.globalSearch(searchValue.trim());
        setSearchResults(results);
      } catch (err) {
        console.error("Search error:", err);
        setSearchError(err.message || 'Error searching. Please try again.');
      } finally {
        setSearchLoading(false);
      }
    }
  }, [searchValue]);

  const handleSearchInputChange = (e) => setSearchValue(e.target.value);
  const handleSearchKeyDown = (e) => {
    if (e.key === 'Enter') { e.preventDefault(); performSearch(); }
    if (e.key === 'Escape') { setSearchOpen(false); }
  };
  const handleSearchIconClick = () => performSearch();
  const handleCloseModal = () => setSearchOpen(false);

  const handleResultClick = (type, id) => {
    let path = '';
    switch (type) {
      case 'characters': path = `/characters/${id}`; break;
      case 'timeline': path = `/timelines/${id}`; break;
      case 'puzzles': path = `/puzzles/${id}`; break;
      case 'elements': path = `/elements/${id}`; break;
      default: return;
    }
    navigate(path);
    handleCloseModal();
  };

  useEffect(() => {
    const handleKeyDown = (event) => {
      if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
        event.preventDefault();
        const searchInput = document.getElementById('global-search-input');
        if (searchInput) searchInput.focus();
      }
    };
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, []);

  const drawerContent = (
    <>
      <Toolbar sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-start', px: [2], minHeight: { xs: APP_BAR_MOBILE, sm: APP_BAR_DESKTOP } }}>
        <MuiLink component={RouterLink} to="/" sx={{ textDecoration: 'none', color: 'inherit', display: 'flex', alignItems: 'center' }}>
          <Typography variant="h6" component="div" sx={{ fontWeight: 'bold' }}>StoryForge</Typography>
        </MuiLink>
        {isMobile && open && (
          <IconButton onClick={handleDrawerToggle} aria-label="close drawer" sx={{ ml: 'auto' }}><ChevronLeftIcon /></IconButton>
        )}
      </Toolbar>
      <Divider />
      <List sx={{ pt: 1 }}>
        {navItems.map((item) => (
          <ListItem key={item.text} disablePadding sx={{ display: 'block', px: 1, mb: 0.5 }}>
            <Tooltip title={item.text} placement="right" disableHoverListener={open}>
              <ListItemButton
                selected={location.pathname === item.path || (item.path !== '/' && location.pathname.startsWith(item.path))}
                onClick={() => handleNavigation(item.path)}
                sx={{ minHeight: 44, justifyContent: 'initial', px: 1.5, borderRadius: theme.shape.borderRadius - 2 }}
              >
                <ListItemIcon sx={{ minWidth: 0, mr: open ? 2 : 'auto', justifyContent: 'center', color: (location.pathname === item.path || (item.path !== '/' && location.pathname.startsWith(item.path))) ? theme.palette.primary.light : 'text.secondary' }}>
                  {item.icon}
                </ListItemIcon>
                <ListItemText primary={item.text} sx={{ opacity: open ? 1 : 0, color: 'text.primary', whiteSpace: 'nowrap' }} />
              </ListItemButton>
            </Tooltip>
          </ListItem>
        ))}
      </List>
    </>
  );

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh', bgcolor: 'background.default' }}>
      <CssBaseline />
      <StyledAppBar position="fixed" open={open} isMobile={isMobile}>
        <Toolbar sx={{minHeight: { xs: APP_BAR_MOBILE, sm: APP_BAR_DESKTOP }}}> {/* Ensure Toolbar height matches */}
          <IconButton
            color="inherit"
            aria-label="open drawer"
            edge="start"
            onClick={handleDrawerToggle}
            sx={{ mr: 2, ...(!isMobile && open && { display: 'none' }) }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1, display: { xs: 'none', sm: 'block' } }} />
          <TextField
            id="global-search-input"
            size="small" variant="outlined" placeholder="Search (Ctrl+K)"
            value={searchValue} onChange={handleSearchInputChange} onKeyDown={handleSearchKeyDown}
            aria-label="Global search"
            sx={{
              bgcolor: 'rgba(255,255,255,0.08)', borderRadius: theme.shape.borderRadius - 2,
              minWidth: { xs: 150, sm: 220, md: 280 }, transition: 'background-color 0.3s',
              '&:hover': { bgcolor: 'rgba(255,255,255,0.12)' },
              '& .MuiOutlinedInput-root': {
                '& fieldset': { borderColor: 'rgba(255,255,255,0.23)' },
                '&:hover fieldset': { borderColor: 'rgba(255,255,255,0.5)' },
                '&.Mui-focused fieldset': { borderColor: theme.palette.primary.light, boxShadow: `0 0 0 2px ${theme.palette.primary.main}33` },
              },
            }}
            InputProps={{
              startAdornment: (<InputAdornment position="start" sx={{ pl: 0.5 }}><IconButton onClick={handleSearchIconClick} edge="start" aria-label="perform search" size="small" sx={{ color: 'text.secondary' }}><SearchIcon /></IconButton></InputAdornment>),
            }}
          />
        </Toolbar>
      </StyledAppBar>
      
      <Drawer
        sx={{
          width: drawerWidth,
          flexShrink: 0,
          '& .MuiDrawer-paper': { width: drawerWidth, boxSizing: 'border-box' },
        }}
        variant={isMobile ? "temporary" : "persistent"}
        anchor="left"
        open={open}
        onClose={isMobile ? handleDrawerToggle : undefined}
        ModalProps={{ keepMounted: true }}
      >
        {drawerContent}
      </Drawer>

      <Main open={open} isMobile={isMobile}>
        <Toolbar sx={{display: {xs: 'block', sm: 'block'}}} /> {/* Spacer for fixed AppBar */}
        <Box sx={{ flexGrow:1, p: { xs: 1.5, sm: 2, md: 2.5 } }}> 
            {children}
        </Box>
      </Main>

      <Modal open={searchOpen} onClose={handleCloseModal} aria-labelledby="search-modal-title">
        <Paper sx={{ position: 'absolute', top: '20%', left: '50%', transform: 'translateX(-50%)', width: { xs: '90%', sm: 550, md: 650 }, bgcolor: 'background.paper', borderRadius: 1.5, boxShadow: 24, p: { xs: 2, sm: 3 }, maxHeight: '70vh', overflowY: 'auto' }}>
          <Typography variant="h6" component="h2" id="search-modal-title" sx={{ mb: 2 }}>Search Results for: <Typography component="span" sx={{ fontWeight: 'bold' }}>{searchValue}</Typography></Typography>
          {searchLoading && (<Box sx={{ display: 'flex', justifyContent: 'center', my: 3 }}><CircularProgress /></Box>)}
          {searchError && <Alert severity="error" sx={{ my: 2 }}>{searchError}</Alert>}
          {!searchLoading && !searchError && searchResults && Object.keys(searchResults).every(key => searchResults[key].length === 0) && (<Typography sx={{ my: 3, textAlign: 'center', color: 'text.secondary' }}>No results found. Try a different search term.</Typography>)}
          {!searchLoading && !searchError && searchResults && (Object.entries(searchResults).map(([type, items]) => (
            items.length > 0 && (
              <Box key={type} sx={{ mb: 2.5 }}>
                <Typography variant="overline" sx={{ display: 'block', color: 'text.secondary', borderBottom: 1, borderColor: 'divider', pb: 0.5, mb: 1, fontWeight: 'medium' }}>{type} ({items.length})</Typography>
                <MUIList dense>
                  {items.map((item) => (
                    <MUIListItem button key={`${type}-${item.id}`} onClick={() => handleResultClick(type, item.id)} sx={{ borderRadius: 1, '&:hover': { bgcolor: 'action.hover' }, mb: 0.5 }}>
                      <ListItemIcon sx={{ minWidth: 36, mr: 0.5 }}>{getIconForType(type) || <Box sx={{ width: 20 }} />}</ListItemIcon>
                      <MUIListItemText primaryTypographyProps={{ sx: { fontWeight: 500 } }} primary={item.name || item.puzzle || item.description || 'Unknown Item'} secondary={`ID: ${item.id}`} />
                    </MUIListItem>
                  ))}
                </MUIList>
              </Box>
            )
          )))}
        </Paper>
      </Modal>
    </Box>
  );
}
```
---
--- FILE: storyforge/frontend/src/pages/CharacterDetail.jsx ---
```jsx
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useQuery, useQueryClient } from 'react-query'; // Removed useIsFetching, use query's own isLoading/isFetching
import {
  Box, Grid, Paper, Typography, Chip, Button, CircularProgress, Divider,
  List, ListItem, ListItemText, Alert, Tab, Tabs, Tooltip, IconButton,
} from '@mui/material';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import EditIcon from '@mui/icons-material/Edit';
import RefreshIcon from '@mui/icons-material/Refresh';
import VisibilityIcon from '@mui/icons-material/Visibility';
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';
import PersonIcon from '@mui/icons-material/Person';
import SmartToyIcon from '@mui/icons-material/SmartToy';
import PageHeader from '../components/PageHeader';
import RelationshipMapper from '../components/RelationshipMapper';
import { api } from '../services/api';
import { Link as RouterLink } from 'react-router-dom';

const DetailItem = ({ label, value, chipColor, chipIcon, fullWidth = false, children }) => (
  <Grid item xs={12} sm={fullWidth ? 12 : 6} md={fullWidth ? 12 : 6}>
    <Typography variant="subtitle2" color="text.secondary" gutterBottom>
      {label}
    </Typography>
    {children ? children : (
      chipColor && value ? (
        <Chip label={value} color={chipColor} icon={chipIcon} variant="outlined" />
      ) : (
        <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>
          {value || <Typography component="span" sx={{ fontStyle: 'italic', color: 'text.disabled' }}>N/A</Typography>}
        </Typography>
      )
    )}
  </Grid>
);

const renderTabContent = (activeTab, characterData, navigate) => {
  if (!characterData) return null; // Ensure characterData exists

  const renderList = (items, type) => {
    if (!items || items.length === 0) {
      return <Typography color="text.secondary" sx={{textAlign:'center', pt:3, fontStyle: 'italic'}}>No {type.toLowerCase()} found.</Typography>;
    }
    return (
      <List dense>
        {items.map(item => {
          if (!item || !item.id) return null; // Skip if item or item.id is missing
          let path, primaryText, secondaryText;
          switch(type) {
            case 'Elements':
              path = `/elements/${item.id}`;
              primaryText = item.name || `Element ID: ${item.id}`;
              secondaryText = `Type: ${item.basicType || 'Unknown'}`;
              break;
            case 'Timeline Events':
              path = `/timelines/${item.id}`;
              primaryText = item.name || item.description || `Event ID: ${item.id}`;
              secondaryText = item.date ? `Date: ${new Date(item.date).toLocaleDateString()}`: 'No date';
              break;
            case 'Puzzles':
              path = `/puzzles/${item.id}`;
              primaryText = item.name || item.puzzle || `Puzzle ID: ${item.id}`;
              secondaryText = `Timing: ${item.timing || 'N/A'}`;
              break;
            default: return null;
          }
          return (
            <ListItem key={item.id} button component={RouterLink} to={path} sx={{borderRadius:1, '&:hover': {bgcolor: 'action.selected'}}}>
              <ListItemText primary={primaryText} secondary={secondaryText} />
            </ListItem>
          );
        })}
      </List>
    );
  };

  switch(activeTab) {
    case 0: return renderList(characterData.ownedElements, 'Elements');
    case 1: return renderList(characterData.associatedElements, 'Elements');
    case 2: return renderList(characterData.events, 'Timeline Events');
    case 3: return renderList(characterData.puzzles, 'Puzzles');
    default: return null;
  }
};


function CharacterDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const queryClient = useQueryClient();
  const [activeTab, setActiveTab] = useState(0);
  const [showMapper, setShowMapper] = useState(true); 
  
  const queryKey = ['character', id];
  // Use `isLoading` for the initial load state, and `isFetching` for background refetches.
  const { data: character, isLoading, isFetching, error } = useQuery(
    queryKey,
    () => api.getCharacterById(id),
    { 
      enabled: !!id,
      // Keep previous data while refetching for a smoother UX
      keepPreviousData: true,
    }
  );
  
  const handleTabChange = (event, newValue) => setActiveTab(newValue);
  const handleBack = () => navigate('/characters');
  const handleEdit = () => alert('Character editing will be available in Phase 3.');
  
  const handleRefresh = () => {
    queryClient.invalidateQueries(queryKey); 
  };

  // Initial loading state: show spinner if isLoading is true AND there's no character data yet (or keepPreviousData is false)
  if (isLoading && !character) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', p: 4, height: 'calc(100vh - 200px)' }}>
        <CircularProgress size={50} /> <Typography sx={{ml:2}}>Loading Character Details...</Typography>
      </Box>
    );
  }
  
  // Error state: show if an error occurred and we don't have character data to display from a previous successful fetch
  if (error && !character) {
    return (
      <Paper sx={{ p: 3, m:1 }} elevation={3}>
        <Alert severity="error" action={
          <Button color="inherit" size="small" onClick={handleRefresh}>Retry</Button>
        }>
          Error loading character: {error.message || 'An unknown error occurred.'}
        </Alert>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mt: 2 }}>
          Back to Characters
        </Button>
      </Paper>
    );
  }
  
  // If after loading and no error, character is still not found (e.g., 404 from API but not a network error)
  // This condition will also be true if `character` is undefined due to an error that `useQuery` didn't surface in `error` object but prevented data population.
  if (!isLoading && !error && !character) {
    return (
      <Paper sx={{ p: 3, m:1 }} elevation={3}>
        <Alert severity="warning">Character data not available or character not found.</Alert>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mt: 2 }}>
          Back to Characters
        </Button>
      </Paper>
    );
  }

  // If character data exists (even if stale while refetching), render the page.
  // isFetching will indicate background activity.
  const pageActions = character ? ( // Only render actions if character data is available
    <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
       <Tooltip title={isFetching ? "Refreshing..." : "Refresh Data"}>
        <span>
          <IconButton onClick={handleRefresh} disabled={isFetching} aria-label="refresh character data">
            {isFetching ? <CircularProgress size={24} color="inherit" /> : <RefreshIcon />}
          </IconButton>
        </span>
      </Tooltip>
      <Tooltip title={showMapper ? "Hide Relationship Map" : "Show Relationship Map"}>
        <IconButton onClick={() => setShowMapper(prev => !prev)} aria-label="toggle relationship map" color={showMapper ? "primary" : "default"}>
          {showMapper ? <VisibilityOffIcon /> : <VisibilityIcon />}
        </IconButton>
      </Tooltip>
      <Tooltip title="Edit character (Phase 3)">
        <Button variant="contained" startIcon={<EditIcon />} onClick={handleEdit} size="medium">
          Edit
        </Button>
      </Tooltip>
    </Box>
  ) : null;

  // This outer return handles the case where `character` might still be null/undefined
  // if all above checks somehow passed (shouldn't happen with correct logic).
  // Or, more practically, this is the main render path when data IS available.
  if (!character) {
     // This is a fallback, ideally one of the earlier returns (loading, error, not found) should have triggered.
     // If it reaches here, it means `isLoading` is false, `error` is null, but `character` is still null/undefined.
     // This could indicate an issue with the API returning an empty successful response for a valid ID,
     // or a problem with how React Query handles such a case.
    return (
        <Paper sx={{ p: 3, m:1 }} elevation={3}>
            <Alert severity="info">Character data is currently unavailable. Please try refreshing.</Alert>
            <Button startIcon={<RefreshIcon />} onClick={handleRefresh} sx={{ mr: 1, mt: 2 }}>Refresh</Button>
            <Button startIcon={<ArrowBackIcon />} onClick={handleBack} sx={{ mt: 2 }}>Back to Characters</Button>
        </Paper>
    );
  }

  return (
    <Box> 
      <PageHeader
        title={character.name || "Character Details"}
        breadcrumbs={[
          { name: 'Characters', path: '/characters' },
          { name: character.name || id },
        ]}
        action={pageActions}
      />
      
      <Grid container spacing={2.5}>
        <Grid item xs={12} md={showMapper ? 7.5 : 12} lg={showMapper ? 8 : 12}>
          <Paper sx={{ p: {xs:2, sm:2.5}, mb: 2.5 }} elevation={1}>
            <Typography variant="h5" gutterBottom sx={{mb:2, fontWeight: 500}}>Character Profile</Typography>
            <Grid container spacing={2}>
              <DetailItem label="Type" value={character.type} 
                chipColor={character.type === 'Player' ? 'primary' : 'secondary'}
                chipIcon={character.type === 'Player' ? <PersonIcon /> : <SmartToyIcon />}
              />
              <DetailItem label="Tier" value={character.tier} 
                chipColor={ character.tier === 'Core' ? 'success' : character.tier === 'Secondary' ? 'info' : 'default' }
              />
              <DetailItem label="Connections (Count)" value={character.connections?.toString()} />
              <DetailItem label="Primary Action" value={character.primaryAction} />
              <DetailItem label="Character Logline" value={character.logline} fullWidth />
              
              {character.overview && (
                <Grid item xs={12} sx={{mt:1}}>
                  <Divider sx={{ my: 1.5 }}><Chip label="Overview & Relationships" size="small" variant="outlined"/></Divider>
                  <Box sx={{ maxHeight: 200, overflowY: 'auto', p:1.5, bgcolor: 'action.hover', borderRadius:1, whiteSpace: 'pre-wrap' }}>
                    <Typography variant="body1">{character.overview}</Typography>
                  </Box>
                </Grid>
              )}
              
              {character.emotion && (
                <Grid item xs={12} sx={{mt:1}}>
                   <Divider sx={{ my: 1.5 }}><Chip label="Emotions" size="small" variant="outlined"/></Divider>
                  <Typography variant="subtitle2" color="text.secondary" gutterBottom>Emotion towards CEO & Others</Typography>
                  <Typography variant="body1" sx={{ whiteSpace: 'pre-wrap' }}>{character.emotion}</Typography>
                </Grid>
              )}
            </Grid>
          </Paper>
        
          <Paper sx={{ p:0 }} elevation={1}>
            <Tabs value={activeTab} onChange={handleTabChange} variant="scrollable" scrollButtons="auto" allowScrollButtonsMobile indicatorColor="primary" textColor="primary">
              <Tab label={`Owned Elements (${character.ownedElements?.length || 0})`} />
              <Tab label={`Associated Elements (${character.associatedElements?.length || 0})`} />
              <Tab label={`Timeline Events (${character.events?.length || 0})`} />
              <Tab label={`Puzzles (${character.puzzles?.length || 0})`} />
            </Tabs>
            <Box sx={{ p: {xs:1.5, sm:2}, minHeight: 180, maxHeight: 300, overflowY: 'auto' }}>
              {renderTabContent(activeTab, character, navigate)}
            </Box>
          </Paper>
        </Grid>
        
        {showMapper && (
          <Grid item xs={12} md={4.5} lg={4}> 
            <RelationshipMapper
              title={`${character.name || 'Entity'}'s Map`}
              entityType="Character"
              entityId={id}
              entityName={character.name}
              relationshipData={character} 
              // Pass the main query's isLoading state for the mapper.
              // The mapper itself should be robust to relationshipData being null/undefined initially.
              isLoading={isLoading || isFetching} // Show loading in mapper if main query is loading OR fetching
            />
          </Grid>
        )}
      </Grid>
      
      <Box sx={{ mt: 3, mb: 2 }}>
        <Button startIcon={<ArrowBackIcon />} onClick={handleBack}>
          Back to All Characters
        </Button>
      </Box>
    </Box>
  );
}

export default CharacterDetail;

```
---

**Explanation of Key Changes:**

1.  **`AppLayout.jsx`:**
    *   **`Main` Component `paddingTop`:** Changed to use a `<Toolbar />` spacer component inside `<Main>`. This is a more robust MUI way to account for the fixed `AppBar`'s height and avoid issues with `theme.mixins.toolbar` potentially not being available or sized correctly during initial style computation or across different breakpoints.
    *   **`Main` Component `marginLeft`:** The logic `marginLeft: isMobile ? 0 : (open ? 0 : -${drawerWidth}px)` correctly handles shifting the main content area when the persistent drawer on desktop opens/closes. When the drawer is closed, the main content's left margin is negative, effectively making it "start" from behind the drawer's width. When open, it's 0. `flexGrow: 1` then allows it to fill the remaining space.
    *   The `StyledAppBar`'s `width` and `marginLeft` are correctly calculated to overlay the content area.

2.  **`CharacterDetail.jsx` (and principles applicable to other detail pages):**
    *   **Robust Loading/Error/Not Found States:**
        *   `if (isLoading && !character)`: Handles initial load where `character` data is not yet available.
        *   `if (error && !character)`: Handles API errors where `character` data couldn't be fetched (and we don't have stale data to show).
        *   `if (!isLoading && !error && !character)`: Catches cases where loading is complete, there's no explicit error, but `character` is still undefined (e.g., API returned 200 with no data for a valid ID, or an unhandled exception prevented data population).
        *   **Crucially, the main render block that uses `character.propertyName` is now only reached if `character` is defined.** I've added a final `if (!character)` check before the main return to act as a safeguard and provide a user-friendly message if data is unexpectedly unavailable.
    *   **`RelationshipMapper` `isLoading` Prop:** Changed to `isLoading={isLoading || isFetching}`. This passes the detail page's primary query's `isLoading` state OR its `isFetching` state. This means the mapper will show its loading state if the initial data isn't there OR if a background refetch is in progress. The mapper itself has internal checks for `!relationshipData` before attempting to process.
    *   **Safer Access in `renderTabContent`:** Added checks for `!item || !item.id` within the `map` functions to prevent errors if any related item in an array is malformed.
    *   **`keepPreviousData: true` for `useQuery`:** This React Query option ensures that if you navigate away and back, or if a background refetch happens, the previously successful data is shown while the new data is fetched. This prevents the UI from flashing a loading state unnecessarily if stale data is acceptable for a moment. `isFetching` will be true during these background updates.
    *   Used `isFetching` for the Refresh button's disabled/loading state as it indicates any fetch activity for that query key.

**To Test:**

1.  Replace `AppLayout.jsx` and `CharacterDetail.jsx`.
2.  **Crucially, apply similar robust data checking logic (the `isLoading && !data`, `error && !data`, `!isLoading && !error && !data`, and final `!data` checks) to your other detail pages (`ElementDetail.jsx`, `PuzzleDetail.jsx`, `TimelineDetail.jsx`) before the main return that uses the fetched data.**
3.  Also update the `RelationshipMapper`'s `isLoading` prop in those other detail pages to use `isLoading={queryIsLoading || queryIsFetching}` from their respective `useQuery` hooks.
4.  Navigate through the application:
    *   Dashboard and List pages should continue to work.
    *   **Character Detail page (and other detail pages once updated) should now render correctly.**
    *   Test with valid and potentially invalid IDs (if your API/BFF handles that) to see error/not found states.
    *   Test the refresh button on detail pages.

This iteration focuses heavily on making the data handling and rendering on detail pages much more resilient to various states of data fetching and potential issues with the data itself. This should resolve the blank screen problem.