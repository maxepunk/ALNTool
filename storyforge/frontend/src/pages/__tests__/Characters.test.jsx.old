/**
 * Test file for Characters component - TDD approach
 * 
 * This test ensures Characters component has proper error boundary protection
 * and continues to function correctly after adding error boundaries.
 */
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import '@testing-library/jest-dom';
import { BrowserRouter } from 'react-router-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import CharactersWithErrorBoundary from '../Characters';

// Mock the API module
jest.mock('../../services/api', () => ({
  api: {
    getAllCharactersWithSociogramData: jest.fn(),
    getGameConstants: jest.fn(),
  },
}));

// Mock the game constants hook
jest.mock('../../hooks/useGameConstants', () => ({
  useGameConstants: () => ({
    data: {
      CHARACTER_TIERS: {
        'Core': { priority: 1 },
        'Secondary': { priority: 2 },
        'Tertiary': { priority: 3 }
      }
    },
    isLoading: false,
    error: null
  }),
  getConstant: (constants, path, defaultValue) => defaultValue
}));

// Mock ErrorBoundary with actual error catching capability
class MockErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // Mock error logging
  }

  render() {
    if (this.state.hasError) {
      return <div data-testid={`error-boundary-${this.props.level}-fallback`}>Error occurred</div>;
    }
    return <div data-testid={`error-boundary-${this.props.level}`}>{this.props.children}</div>;
  }
}

jest.mock('../../components/ErrorBoundary', () => MockErrorBoundary);

// Test utilities
const createTestQueryClient = () => {
  return new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
        staleTime: 0,
      },
    },
  });
};

const renderWithProviders = (ui, { queryClient = createTestQueryClient() } = {}) => {
  return render(
    <QueryClientProvider client={queryClient}>
      <BrowserRouter>
        {ui}
      </BrowserRouter>
    </QueryClientProvider>
  );
};

describe('Characters Component Error Boundary Protection', () => {
  beforeEach(() => {
    // Mock successful API response
    const { api } = require('../../services/api');
    api.getAllCharactersWithSociogramData.mockResolvedValue([
      {
        id: '1',
        name: 'Test Character',
        tier: 'Core',
        characterTier: 'Core'
      }
    ]);
    api.getGameConstants.mockResolvedValue({
      CHARACTER_TIERS: {
        'Core': { priority: 1 }
      }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should be wrapped with component-level error boundary', async () => {
    renderWithProviders(<CharactersWithErrorBoundary />);

    // Should find the error boundary wrapper
    expect(screen.getByTestId('error-boundary-component')).toBeInTheDocument();
  });

  it('should render characters data successfully when no errors occur', async () => {
    renderWithProviders(<CharactersWithErrorBoundary />);

    // Wait for loading to complete and data to render
    await waitFor(() => {
      expect(screen.getByText('Test Character')).toBeInTheDocument();
    });
  });

  it('should handle API errors gracefully within error boundary', async () => {
    // Mock API to throw error
    const { api } = require('../../services/api');
    api.getAllCharactersWithSociogramData.mockRejectedValue(new Error('API Error'));

    renderWithProviders(<CharactersWithErrorBoundary />);

    // Error boundary should catch this and prevent app crash
    expect(screen.getByTestId('error-boundary-component')).toBeInTheDocument();
  });

  it('should display page header and navigation elements', async () => {
    renderWithProviders(<CharactersWithErrorBoundary />);

    await waitFor(() => {
      expect(screen.getByRole('heading', { name: /Character Production Hub/i })).toBeInTheDocument();
    });
  });
});

// Test component that will be used to verify error boundary functionality
export const ThrowErrorInCharacters = () => {
  throw new Error('Simulated error in Characters component');
};

describe('Characters Error Boundary Integration Test', () => {
  it('should catch and handle component errors without crashing app', () => {
    // This test will verify that when we add ErrorBoundary to Characters,
    // it properly catches errors from child components
    const TestCharactersWithError = () => (
      <MockErrorBoundary level="component">
        <div>Characters Header</div>
        <ThrowErrorInCharacters />
      </MockErrorBoundary>
    );

    renderWithProviders(<TestCharactersWithError />);
    
    // Error boundary should be present
    expect(screen.getByTestId('error-boundary-component')).toBeInTheDocument();
    expect(screen.getByText('Characters Header')).toBeInTheDocument();
  });
});